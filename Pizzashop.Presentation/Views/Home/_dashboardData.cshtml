@model Pizzashop.DAL.ViewModels.dashboardviewmodel

<div class="row">
    <div class="col-lg-3 col-md-6 col-12">
        <div class="d-flex flex-column justify-content-between bg-white shadow rounded p-2 h-100"
            style="border-radius: 3% !important;">
            <div class="d-flex justify-content-end">
                <div class="d-flex justify-content-center align-items-center rounded-circle p-2"
                    style="border: 1px solid rgb(93, 214, 93);">
                    <div class="dashboard-icon d-flex justify-content-center align-items-center"
                        style="background-color: rgb(93, 214, 93);">
                        <img src="~/images/icons/total-sales.svg" height="20" width="20" alt="">
                    </div>
                </div>
            </div>
            <div class="d-flex flex-column p-2">
                <div class="d-flex justify-content-start">
                    <h3 class="text-left"> &#x20b9; @Model.TotalSales</h3>
                </div>
                <div class="d-flex justify-content-start">
                    <span>Total Sales</span>
                </div>
            </div>
        </div>

    </div>
    <div class="col-lg-3 col-md-6 col-12 mt-lg-0 mt-md-0 mt-2">
        <div class="d-flex flex-column justify-content-between bg-white shadow rounded p-2 h-100"
            style="border-radius: 3% !important;">
            <div class="d-flex justify-content-end">
                <div class="p-2 d-flex justify-content-center align-items-center dashboard-icon-outer rounded-circle"
                    style="border: 1px solid rgb(255, 118, 255);">
                    <div class="dashboard-icon d-flex justify-content-center align-items-center"
                        style="background-color: rgb(255, 118, 255);">
                        <img src="~/images/icons/total-orders.svg" height="20" width="20" alt="">
                    </div>
                </div>
            </div>
            <div class="d-flex flex-column p-2">
                <div class="d-flex justify-content-start">
                    <h3 class="text-left">@Model.TotalOrders</h3>
                </div>
                <div class="d-flex justify-content-start">
                    <span>Total Orders</span>
                </div>
            </div>
        </div>

    </div>
    <div class="col-lg-3 col-md-6 col-12 mt-lg-0 mt-2">
        <div class=" d-flex flex-column justify-content-between bg-white shadow rounded p-2 h-100"
            style="border-radius: 3% !important;">
            <div class="d-flex justify-content-end">
                <div class="p-2 d-flex justify-content-center align-items-center dashboard-icon-outer rounded-circle"
                    style="border: 1px solid rgb(65, 127, 221);">
                    <div class="dashboard-icon d-flex justify-content-center align-items-center"
                        style="background-color: rgb(65, 127, 221);">
                        <img src="~/images/icons/total-orders.svg" height="20" width="20" alt="">
                    </div>
                </div>
            </div>
            <div class="d-flex flex-column p-2">
                <div class="d-flex justify-content-start">
                    <h3 class="text-left"> &#x20b9; @Model.AvgOrderValue</h3>
                </div>
                <div class="d-flex justify-content-start">
                    <span>Avg. Order Value</span>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-12  mt-lg-0 mt-2">
        <div class="d-flex flex-column justify-content-between bg-white shadow rounded p-2 h-100"
            style="border-radius: 3% !important;">
            <div class="d-flex justify-content-end">
                <div class="p-2 d-flex justify-content-center align-items-center dashboard-icon-outer rounded-circle"
                    style="border: 1px solid rgb(255, 118, 64);">
                    <div class="dashboard-icon d-flex justify-content-center align-items-center"
                        style="background-color: rgb(255, 118, 64);">
                        <img src="~/images/icons/waiting-time.svg" height="20" width="20" alt="">
                    </div>
                </div>
            </div>
            <div class="d-flex flex-column p-2">
                <div class="d-flex justify-content-start">
                    <h3 class="text-left"> @Model.AvgWaitingTime mins</h3>
                </div>
                <div class="d-flex justify-content-start">
                    <span>Avg. Waiting Time</span>
                </div>
            </div>
        </div>

    </div>
</div>

<div class="row mt-4">
    <div class="col-lg-6 col-12">
        <div class="bg-white shadow rounded p-2 h-100">
            <div class="d-flex justify-content-start">
                <h4>Revenue</h4>
            </div>
            <div class="chart">
                <div id="revenuechart" ></div>
                <canvas id="myChart"></canvas>
            </div>
        </div>

    </div>
    <div class="col-lg-6 col-12 mt-2">
        <div class="bg-white shadow rounded p-2 h-100">
            <div class="d-flex justify-content-start">
                 
                <h4>Customer Growth</h4>
            </div>
            <div class="chart">
                <canvas id="customerGrowthChart"></canvas>
                 <div id="customerchart"></div>
            </div>
        </div>

    </div>

</div>

<div class="row mt-4">
    <div class="col-lg-3 col-md-6 col-12">
        <div class="bg-white shadow rounded p-2 h-100" style="border-radius: 3% !important;">
            <div class="d-flex justify-content-start mb-2">
                <h4>Top Selling Items</h4>
            </div>
            @foreach (var topitem in Model.topSellingItems)
            {
                <div class="d-flex justify-content-start align-items-center gap-1">
                    <span>#@topitem.ItemId</span>
                    @if (topitem.ItemImage == null)
                    {
                        <img src="~/images/dining-menu.png" alt="" height="50" width="50">
                    }
                    else
                    {
                        <img src="@topitem.ItemImage" style="border-radius: 50%;" alt="" width="50" height="50">
                    }
                    <div class="d-flex flex-column">
                        <span>@topitem.ItemName</span>
                        <div class="d-flex align-items-center">
                            <img src="~/images/icons/menu.png" alt="" width="20" height="20"> @topitem.OrderCount
                            Order
                        </div>
                    </div>
                </div>
                <hr>
            }
        </div>

    </div>
    <div class="col-lg-3 col-md-6 col-12 mt-md-0 mt-2">
        <div class="bg-white shadow rounded p-2 h-100" style="border-radius: 3% !important;">
            <div class="d-flex justify-content-start mb-2">
                <h4>Least Selling Items</h4>
            </div>
            @foreach (var leastitem in Model.leastSellingItems)
            {
                <div class="d-flex justify-content-start align-items-center gap-1">
                    <span>#@leastitem.ItemId</span>
                    <img src="~/images/dining-menu.png" alt="" height="50" width="50">
                    <div class="d-flex flex-column">
                        <span>@leastitem.ItemName</span>
                        <div class="d-flex align-items-center">
                            <img src="~/images/icons/menu.png" alt="" width="20" height="20">@leastitem.OrderCount Order
                        </div>
                    </div>
                </div>
                <hr>
            }
        </div>

    </div>
    <div class="col-lg-3 col-md-6 col-12 mt-lg-0 mt-2">
        <div class=" d-flex flex-column justify-content-between bg-white shadow rounded p-2 h-100"
            style="border-radius: 3% !important;">
            <div class="d-flex justify-content-end">
                <div class="p-2 d-flex justify-content-center align-items-center dashboard-icon-outer rounded-circle"
                    style="border: 1px solid orange;">
                    <div class="dashboard-icon d-flex justify-content-center align-items-center"
                        style="background-color: orange;">
                        <img src="~/images/icons/waiting-list.svg" height="20" width="20" alt="">
                    </div>
                </div>
            </div>

            <div class="d-flex flex-column p-2">
                <div class="d-flex justify-content-start">
                    <h2 class="text-left"> @Model.WaitingListCount</h2>
                </div>
                <div class="d-flex justify-content-start">
                    <span>Waiting List Count</span>
                </div>
            </div>
        </div>

    </div>
    <div class="col-lg-3 col-md-6 col-12 mt-lg-0 mt-2">
        <div class="d-flex flex-column justify-content-between bg-white shadow rounded p-2 h-100"
            style="border-radius: 3% !important;">
            <div class="d-flex justify-content-end">
                <div class="p-2 d-flex justify-content-center align-items-center dashboard-icon-outer rounded-circle"
                    style="border: 1px solid orange;">
                    <div class="dashboard-icon d-flex justify-content-center align-items-center"
                        style="background-color: orange;">
                        <img src="~/images/icons/customer.svg" height="20" width="20" alt="">
                    </div>
                </div>
            </div>
            <div class="d-flex flex-column p-2">
                <div class="d-flex justify-content-start">
                    <h2 class="text-left">@Model.NewCustomerCount</h2>
                </div>
                <div class="d-flex justify-content-start">
                    <span>New Customer Count</span>
                </div>
            </div>
        </div>

    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>



<script>
    $(document).ready(function () {
        getGraph();
        getGraphForCustomer();
    });

    function getGraph() {
        var OrderRevenue = @Html.Raw(Json.Serialize(Model.RevenueList));
        
        console.log("orders",OrderRevenue);

        if (!OrderRevenue || OrderRevenue.length === 0) {
              document.getElementById("revenuechart").innerHTML = "<p>No revenue data available to display.</p>";
              return;
          }

        let format = "dd-MM-yyyy";

        let filter = $("#timeFilter").val();
        console.log("filter:",filter);

        let fromDate = new Date(OrderRevenue[0].revenueDate);

        let endDate = new Date(OrderRevenue[OrderRevenue.length - 1].revenueDate);

        const totalDays = Math.floor((endDate - fromDate) / (1000 * 60 * 60 * 24));
        const totalMonths = (endDate.getFullYear() - fromDate.getFullYear())*12 + (endDate.getMonth() - fromDate.getMonth());

          switch(filter){
            case "today":
                format = "HH:mm";
                break;
            case "this_month":
                format = "dd-MM-yyyy";
                break;
            case "Last_30_days":
                format = "dd-MM-yyyy";
                break;
            case "Last_7_days":
                format = "dd-MM-yyyy";
                break;
            default:
                if(totalMonths > 12){
                    format = "yyyy";
                }
                else if(totalDays > 30){
                    format = "MMM-yyyy"
                }
                else if(totalDays == 0){
                    format = "HH:MM"
                }
                else{
                    format = "dd-MM-yyyy";
                }
                break;
        }

        const labels = OrderRevenue.map(order => {
            const date = new Date(order.revenueDate);
            return formatDate(date, format);
        });

        const revenue = OrderRevenue.map(order => order.totalRevenue);

        var ctx2 = document.getElementById("myChart").getContext("2d");

        new Chart(ctx2, {
            type: "line",
            data: {
                labels: labels,
                datasets: [{
                    label: "Revenue",
                    data: revenue,
                    backgroundColor: "rgba(75, 192, 192, 0.2)",
                    borderColor: "rgba(75, 192, 192, 1)",
                    borderWidth: 2,
                    fill: true,
                    tension: 0.3,
                    pointRadius: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: {
                            display: true,
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                        }
                    }
                }
            }
        });

        function formatDate(date, format) {
            const options = {};
            switch (format) {
                case "HH:mm":
                    return date.getHours().toString().padStart(2, '0') + ":00";
                case "dd-MM-yyyy":
                    return date.toLocaleDateString('en-GB');
                case "MM-yyyy":
                    return date.toLocaleString('default', { month: 'short', year: 'numeric' });
                case "yyyy":
                    return date.getFullYear().toString();
                default:
                    return date.toLocaleDateString();
            }
        }
    }

    function getGraphForCustomer() {
        var CustomerRevenue = @Html.Raw(Json.Serialize(Model.CustomerList));
        console.log("customerrevenue", CustomerRevenue);

         if (!CustomerRevenue || CustomerRevenue.length === 0) {
        document.getElementById("customerchart").innerHTML = "<p>No Customer data available to display.</p>";
        return;
        }

        let format = "dd-MM-yyyy";

        let filter = $("#timeFilter").val();
        console.log("filter:",filter);

        let fromDate = new Date(CustomerRevenue[0].revenueDate);

        let endDate = new Date(CustomerRevenue[CustomerRevenue.length - 1].revenueDate);

        const totalDays = Math.floor((endDate - fromDate) / (1000 * 60 * 60 * 24));
        const totalMonths = (endDate.getFullYear() - fromDate.getFullYear())*12 + (endDate.getMonth() - fromDate.getMonth());

          switch(filter){
            case "today":
                format = "HH:mm";
                break;
            case "this_month":
                format = "dd-MM-yyyy";
                break;
            case "Last_30_days":
                format = "dd-MM-yyyy";
                break;
            case "Last_7_days":
                format = "dd-MM-yyyy";
                break;
            default:
                if(totalMonths > 12){
                    format = "yyyy";
                }
                else if(totalDays > 30){
                    format = "MMM-yyyy"
                }
                 else if(totalDays == 0){
                    format = "HH:MM"
                }
                else{
                    format = "dd-MM-yyyy";
                }
                break;
        }
        const labels1 = CustomerRevenue.map(order => {
            const date = new Date(order.customerDate);
            return formatDates(date, format); 
        });

        console.log("labels",labels1);

        const customercount = CustomerRevenue.map(order => order.totalCustomer);
        console.log("customercount:", customercount);


        var ctx1 = document.getElementById("customerGrowthChart").getContext("2d");

        new Chart(ctx1, {
            type: "line",
            data: {
                labels: labels1,
                datasets: [{
                    label: "Customer",
                    data: customercount,
                    backgroundColor: "rgba(255, 99, 132, 0.2)", 
                    borderColor: "rgba(255, 99, 132, 1)", 
                    borderWidth: 2,
                    fill: true,
                    tension: 0.3
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: {
                            display: true}
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                        }
                    }
                }
            }
        });

        function formatDates(date, format) {
            const options = {};
            switch (format) {
                case "HH:mm":
                    return date.getHours().toString().padStart(2, '0') + ":00";
                case "dd-MM-yyyy":
                    return date.toLocaleDateString('en-GB');
                case "MM-yyyy":
                    return date.toLocaleString('default', { month: 'short', year: 'numeric' });
                case "yyyy":
                    return date.getFullYear().toString();
                default:
                    return date.toLocaleDateString();
            }
        }
    }
</script>

<script>
    $(document).ready(function () {

    });


</script>