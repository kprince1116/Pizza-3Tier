@model IList<DAL.ViewModels.RolesAndPermissionsviewmodel>

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="css/bootstrap.min.css">
  <link rel="stylesheet" href="css/style2.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
  <title>Document</title>
</head>

<body>
  <div class="d-flex">
    <div class="w-100 bg-light">
      <div class="d-flex  justify-content-between">
        <div class="ms-4">
          <p class="fs-2 fw-bold" style="color: rgb(0, 102, 187);">Permission</p>
        </div>
        <div class="me-4 mt-2">
           <a asp-action="Roles" asp-controller="RolesAndPermissions" class="border px-2 py-2 fw-bold" style="background-color:rgb(0, 102, 187); text-decoration: none; color: #ffff; border-radius: 5px !important;">
            < Back</a>
        </div>
      </div>

      <form method="post" asp-controller="RolesAndPermissions" asp-action="Permissions" class="bg-white border ms-4 me-4">
        <div class="row ps-3 pe-3 pt-3">
          <div class="col-lg-4 pb-3 ">
            <div class="form-floating">
              <input type="text" class=" form-control" id="floatingInput" placeholder="name@example.com"
                value=@ViewBag.RoleName>
              <label for="floatingInput">Role</label>
            </div>

          </div>
        </div>

        <div class="ms-3 me-3 mb-4  table-responsive">
          <table class="table">
            <thead>
              <tr  style="opacity: 0.95;">
                <div>
                  <th scope="col">
                     <input class="form-check-input" type="checkbox"  value="" id="permission-checkbox">
                    Permissions
                </div>
                </th>
                <th scope="col" style="text-wrap: nowrap;">Can View</th>
                <th scope="col" style="text-wrap: nowrap;">Can Add/Edit</th>
                <th scope="col" style="text-wrap: nowrap;">Can Delete</th>
              </tr>
            </thead>
            <tbody>

              @for (int i=0 ; i<Model.Count;i++)
              {
                  <tr>
                  <th scope="row">
                    <div class="form-check class="fs-6 fw-bold" style="opacity: 0.85;">
                      <input type="hidden"  asp-for="@Model[i].Rolesandpermissionid">
                      <input type="hidden"  asp-for="@Model[i].Userroleid">
                      <input type="hidden"  asp-for="@Model[i].RoleName">
                      <input type="hidden"  asp-for="@Model[i].Permissionid">
                      <input type="hidden"  asp-for="@Model[i].PermissionName">
                      <input class="form-check-input inner-checkbox" type="checkbox" asp-for="@Model[i].IsSelected" value="" id="flexCheckDefault">
                      <label class="form-check-label text-nowrap" for="flexCheckDefault">
                        @Model[i].PermissionName
                    </div>
                  </th>
                  <td>
                    <div class="form-check form-switch">
                      <input class="form-check-input can-view" type="checkbox" onclick="selectAll()" role="switch" id="flexSwitchCheckDefault"
                        asp-for="@Model[i].CanView" >
                    </div>
                  </td>
                  <td>
                    <div class="form-check form-switch">
                      <input class="form-check-input can-add-edit" type="checkbox" onclick="selectAll()" role="switch" id="flexSwitchCheckDefault"
                       asp-for = " @Model[i].CanAddEdit">
                    </div>
                  </td>
                  <td>
                    <div class="form-check form-switch">
                      <input class="form-check-input can-delete" type="checkbox" onclick="selectAll()" role="switch" id="flexSwitchCheckDefault"
                        asp-for = "@Model[i].CanDelete">
                    </div>
                  </td>
                  </tr>
              }
            </tbody>
          </table>
        </div>
        <div class="pe-3 pb-4 d-flex justify-content-end gap-2">
          <button class="btn btn-outline-primary" type="submit" style="color: rgb(0, 102, 187);">Save</button>
          <button class="btn btn-primary" type="button" onclick="resetForm()" style="background-color: rgb(0, 102, 187)">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  </div>
  <script src="js/bootstrap.bundle.js"></script>
</body>

</html>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
@section Scripts {
<script>
$(document).ready(function () {
    const outerCheck = document.getElementById("permission-checkbox");
    const innerChecks = document.querySelectorAll(".inner-checkbox");
    const canDeleteCheckboxes = document.querySelectorAll('.can-delete');
    const canAddEditCheckboxes = document.querySelectorAll('.can-add-edit');
    const canViewCheckboxes = document.querySelectorAll('.can-view');

    outerCheck.addEventListener("change", function () {
        innerChecks.forEach(checkbox => {
            checkbox.checked = outerCheck.checked;
            $(checkbox).trigger("change");
        });
    });

    innerChecks.forEach(checkbox => {
        checkbox.addEventListener("change", function () {
            const allChecked = [...innerChecks].every(cb => cb.checked);
            const anyChecked = [...innerChecks].some(cb => cb.checked);

            outerCheck.checked = allChecked;
            outerCheck.indeterminate = !allChecked && anyChecked;
        });
    });

    const enableDisableAddEditDelete = (index) => {
        if (canViewCheckboxes[index].checked) {
            canAddEditCheckboxes[index].disabled = false;
            canDeleteCheckboxes[index].disabled = false;
        } else {
            canAddEditCheckboxes[index].disabled = true;
            canDeleteCheckboxes[index].disabled = true;
            canAddEditCheckboxes[index].checked = false; 
            canDeleteCheckboxes[index].checked = false; 
        }
    };

    canViewCheckboxes.forEach((checkbox, index) => {
        checkbox.addEventListener('change', function () {
            enableDisableAddEditDelete(index); 
        });

        enableDisableAddEditDelete(index);
    });

    canDeleteCheckboxes.forEach((checkbox, index) => {
        checkbox.addEventListener('change', function () {
            if (canDeleteCheckboxes[index].checked || canAddEditCheckboxes[index].checked) {
                canViewCheckboxes[index].checked = true;
            }
        });
    });

    canAddEditCheckboxes.forEach((checkbox, index) => {
        checkbox.addEventListener('change', function () {
            if (canDeleteCheckboxes[index].checked || canAddEditCheckboxes[index].checked) {
                canViewCheckboxes[index].checked = true;
            }
        });
    });
});

 $(document).ready(function () {
       
             @if (TempData["RAndPSuccess"] != null && (bool)TempData["RAndPSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Tax Added successfully!');
                </text>
            }
            
        });

</script>
}

<style>
  .form-switch .form-check-input {
    width: 2em;
    margin-left: -1.5em;
    background-image: url(data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e);
    background-position: left center;
    border-radius: 2em;
    transition: background-position .15s ease-in-out;
}
</style>