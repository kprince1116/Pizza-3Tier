@using BAL.Models.Interfaces
@using Pizzashop.DAL.ViewModels
@model Pizzashop.DAL.ViewModels.menuviewmodel

@inject IPermissions PermissionService

@{
    var canAddMenu = await PermissionService.HasPermission("Menu", ActionPermissions.CanAddEdit);
    var canDeleteMenu = await PermissionService.HasPermission("Menu", ActionPermissions.CanDelete);
}

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="~/css/Menu.css">
  <link rel="stylesheet" href="~/css/MenuModifier.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet">
  <title>Document</title>
</head>

<body>
  <div class="d-flex">
    <div class="w-100 bg-light">
      <div>
        <div class="d-flex justify-content-between">
          <div class="ms-3">
            <p class="fs-2 fw-bold" style="color: rgb(0, 102, 187);">Menu</p>
          </div>
        </div>

        <div class="d-flex border ms-3 gap-4 bg-white me-3">
          <ul class="nav" id="menuTabs">
            <li class="nav-item">
              <a class="nav-link active item-nav" id="items-tab" data-bs-toggle="tab" href="#items-container" role="tab"
                aria-controls="items-container" aria-selected="true">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list-ul"
                  viewBox="0 0 16 16">
                  <path fill-rule="evenodd"
                    d="M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5m-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2m0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                </svg>
                Items
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link item-nav" id="modifiers-tab" data-bs-toggle="tab" href="#modifiers-container" role="tab"
                aria-controls="modifiers-container" aria-selected="false">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                  class="bi bi-ui-checks-grid" viewBox="0 0 16 16">
                  <path
                    d="M2 10h3a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1m9-9h3a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1h-3a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1m0 9a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1zm0-10a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zM2 9a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2zm7 2a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2h-3a2 2 0 0 1-2-2zM0 2a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm5.354.854a.5.5 0 1 0-.708-.708L3 3.793l-.646-.647a.5.5 0 1 0-.708.708l1 1a.5.5 0 0 0 .708 0z" />
                </svg>
                Modifiers
              </a>
            </li>
          </ul>
        </div>


        <!-- Tab Content -->
        <div class="tab-content ms-3 me-3 mt-2">

          <!-- Items Section -->
          <div class="tab-pane fade show active" id="items-container" role="tabpanel" aria-labelledby="items-tab">
            <div class="d-flex border category-box">
              <aside class="bg-light">
                <div class="div">
                  <div class="ms-3 mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                      <div class="fs-3">Category</div>
                   @if(canAddMenu) {
                    <img data-bs-toggle="modal" data-bs-target="#exampleModal1" class="pe-2" style="height: 25px;"
                        src="~/images/icons/plus-square.svg" alt="">
                        }
                    </div>
                  </div>
                  <div class="sidebar-elements">
                    @foreach (var category in Model.Categories)
                    {
                      <div class="aaa">
                        <div class="d-flex justify-content-between align-items-center sidebar-category">
                          <a style="color: black;" class="d-flex gap-2 pt-2 pb-2 ps-3 nav-link active align-items-center categorygroupbtn"
                            id="category-idforclick" data-category-id="@category.CategoryId">
                            <img style="height: 15px;" src="~/images/icons/grid.png">
                            <div onclick="fetchItems(@category.CategoryId)">@category.CategoryName</div>
                          </a>
                           @if(canAddMenu || canDeleteMenu)
                           {
                          <div class="icons-forlist">
                             @if(canAddMenu)
                             {
                            <a data-category-edit-id="@category.CategoryId" data-category-name="@category.CategoryName"
                              data-description="@category.Description" onclick="setEditData(this)" class="edit-category"
                              data-bs-toggle="modal" data-bs-target="#editModal" style="text-decoration: none;" >
                              <img style="text-decoration: none;" src="~/images/icons/pen.svg" alt="">
                            </a>
                            }
                             @if(canDeleteMenu)
                             {
                            <a style="text-decoration: none;"  data-category1-id="@category.CategoryId" class="delete-category" data-bs-toggle="modal"
                              data-bs-target="#deleteModal1" style="text-decoration: none;">
                              <img style="text-decoration: none;" src="~/images/icons/trash (1).svg"  alt="">
                            </a>
                            }
                          </div>
                          }
                        </div>
                      </div>
                    }
                  </div>
                </div>
              </aside>

              <div class="ps-3 container-fluid w-100 bg-white overflow-auto">
                <p class="fs-3">Items</p>
                <div class="d-flex align-items-center gap-3 pe-3 justify-content-end">
                  <div class=" d-flex justify-content-end position-relative align-items-center ">
                    <div class="d-flex justify-content-end position-relative align-items-center">
                      <input type="text" class="search form-control" style="height: 50px;" id="itemsearch"
                        placeholder="Search" />
                      <img src="~/images/icons/search.svg" alt="" style="width: 20px; aspect-ratio: 1"
                        class="bg-white position-absolute rounded-2 m-2" />
                    </div>
                  </div>
                  @if(canDeleteMenu)
                  {
                  <div>
                    <img data-bs-toggle="modal" data-bs-target="#deleteItemModalForMass"
                      class="border delete-icon d-flex p-lg-3 p-2" src="~/images/icons/trash (1).svg" alt="Delete Icon"
                      id="delete-icon-massdelete" />
                  </div>
                  }
                   @if(canAddMenu)
                   {
                  <div class="border new-item d-flex p-lg-3 p-2 fw-bold" id="AddNewItem" 
                    style="background-color: #0066a7; color: white; text-wrap: nowrap;">
                    +New Item
                  </div>
                  }
                </div>
                <div id="items-container-table">
                  @Html.Partial("_ItemsPartial", Model.pagination)
                </div>
              </div>
            </div>
          </div>

          <!-- Modifiers Section -->
          <div class="tab-pane fade" id="modifiers-container" role="tabpanel" aria-labelledby="modifiers-tab">
              
          </div>
        </div>

      </div>
    </div>
  </div>
  </div>

  <!-- Bootstrap & jQuery -->
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

</html>

@section scripts
{
  <!-- modifier group -->

<script>
  $(document).off("click","#AddNewItem").on("click", "#AddNewItem", function() {
    $("#mgItemList").html("");
    selectedModifiersItem=[];
    var modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('AddItem'));
    modal.show();
  });
</script>


  <script>
    var selectedModifierId;

    $(document).ready(function () {
      function loadModifierTab() {
        $.ajax({
          url: '@Url.Action("ModifiersTab", "Menu")',
          type: 'GET',
          success: function (data) {
            $('#modifiers-container').html(data);
          
            selectedModifierId = $(".modifierGroupBtn").first().data("modifier-id")

            loadItemsByModifier(selectedModifierId);
          },
          error: function (xhr, status, error) {
            console.error("Error loading ModifierTab:", error);
            alert("An error occurred while loading the ModifierTab.");
          }
        });
      }

      loadModifierTab();

      $('#modifiers-tab').on('click', function () {
        loadModifierTab();
      });

      let debounceTimer;

      $(document).on("click", ".modifierGroupBtn", function () {
        console.log("Modifier button clicked");
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
          selectedModifierId = $(this).data("modifier-id");
          console.log("Selected Modifier ID:", selectedModifierId);
          loadItemsByModifier(selectedModifierId);
        }, 100);
      });


      $(document).on("click", ".editmodifiergroup", function () {

        console.log("edit Modifier button clicked");
        selectedModifierId = $(this).data("modifier-edit-id");
        console.log("Selected Modifier IDs:", selectedModifierId);
        GetModifierGroupItems(selectedModifierId);
      });

      function GetModifierGroupItems(selectedModifierId) {
        $.ajax({
          url: '@Url.Action("GetExisistingsModifier", "Menu")',
          type: "GET",
          data: { id: selectedModifierId },
          success: function (data) {
            $("#existingModifierList").html(data);
             selectedExistingModifiers = [];
      
         $(".existModifiersForEdit").each(function() {
        let id = $(this).data("mgitemid"); 
        let name = $(this).data("mgitemname");
        selectedExistingModifiers.push({ ModifierItemId: Number(id), Name: name });
        
       });  
        console.log("selectedExistingModifiers:", selectedExistingModifiers);
          },
          error: function () {
            console.log("Error occurs");
          }
        });
      }

        

      function loadItemsByModifier(modifierId) {
        let pagesize = $("#selectpagesizeForModifiers").val();
        console.log("Page size:", pagesize);
        $.ajax({
          url: '@Url.Action("ItemsByModifier", "Menu")',
          type: "GET",
          data: { id: modifierId, pageNo: 1, pageSize: pagesize, searchKey: "" },
          success: function (data) {
            $("#modifieritems").html(data);
          },
          error: function () {
            console.log("Error occurs");
          }
        });
      }
    });
  </script>

  <script>
    function Tickcheckbox()
       {
         $.each(selectedExistingModifiers, function (index, id) {
          console.log("id",id);
        $('.modifierItemCheckBox[data-deid="' + id.ModifierItemId + '"]').prop("checked", true);
      });
       }
    </script>

  <script>
    function fetchItems(categoryId) {
      selectedCategoryId = categoryId;
      let pagesize = $('#selectpagesizeForItems').val();
      console.log(selectedCategoryId);
      $.ajax({
        url: '@Url.Action("ItemsByCategory", "Menu")',
        type: 'GET',
        data: { id: selectedCategoryId, searchKey: "", pagesize: pagesize, pageNo: 1 },
        success: function (data) {
          console.log(data);
          $('#items-container-table').html(data);
        },
        error: function () {
          console.log("Error");
        }
      });
    }
  </script>

  <script>

    $(document).on("input", "#itemsearch", function () {
      console.log("success");
      pageNum = 1;
      changePageForItem(pageNum);
    });

    $(document).on("click", "#itemEdit", function () {
      loadItemModal($(this).data("editid"));
    })

    function loadItemModal(id) {
      $.ajax({
        url: '@Url.Action("EditItem", "Menu")',
        type: "GET",
        data: { id: id },
        success: function (data) {
          selectedModifiers = [];
          $("#modal-size").html(data);
          $(".selectedModifierGroup").each(function () {
            var mgId = $(this).data("mgitemid");
            selectedModifiers.push(Number(mgId));
          });
        },
        error: function () {
          console.log("No Projects Found");
          $("#editItemModal").html('No User Fetched');
        }
      });
    }

    $(document).on("click", "#modifierEdit", function () {
      const editModifierId = $(this).data("editmodifierid");
      console.log("edit",editModifierId);
    if (editModifierId) {
        loadModifierModal(editModifierId);
    } else {
        console.error("No edit modifier ID found.");
    }
   });

       function loadModifierModal(id) {
        $.ajax({
        url: '@Url.Action("EditModifierItem", "Menu")',
        type: "GET",
        data: { editid: id },
        success: function (data) {
              $("#edit-modal-size").html(data);
        },
        error: function (xhr, status, error) {
            console.error("Error occurred: ", status, error);
        }
    });
}
  </script>

  <script>
    function setEditData(element) {
      var categoryId = element.getAttribute("data-category-edit-id");
      var categoryName = element.getAttribute("data-category-name");
      var description = element.getAttribute("data-description");
      document.getElementById("CategoryId").value = categoryId;
      document.getElementById("editforname").value = categoryName;
      document.getElementById("editfordescription").value = description;
    }

  </script>

  <script>
        function setEditModifierData(element) {
      var modifierId = element.getAttribute("data-modifier-edit-id");
      var modifierName = element.getAttribute("data-modifier-name");
      var description = element.getAttribute("data-description");
      $("#ModifiergId").val(modifierId);
      $("#editformgname").val(modifierName);
      $("#editformgdescription").val(description);
    }

 
  </script>

  <script>
    function resetForm() {
      $('form')[0].reset();
    }
  </script>

  @*add existing modifier*@

  <script>

    @* $(document).on("click","#ExistingModifierListSearch",function(){
      console.log("succed");
      changePageSizeForExistingModifiers(1);
     }); *@


    $(document).on('click', '.existingmodifierbutton', function () {
      
      console.log("existing modifier button clicked");  
      changePageSizeForExistingModifiers();
    })

    function changePageSizeForExistingModifiers() {
      let pagesize = $('#selectpagesizeForExistingModifiers').val();
      let search = $('#ExistingModifierListSearch').val();

      $.ajax({
        url: '@Url.Action("ItemsByExistingModifier", "Menu")',
        type: "GET",
        data: { pageNo: 1, pageSize: pagesize, searchKey: search },
        success: function (data) {
          $("#existingmodifiermodals").html(data);
          console.log("success");
        },
        error: function () {
          console.log("Error occurs");
        }
      });
    }

    $("#ExistingModifierListSearch").on('input',function(){
      console.log("successssssssssss");
    changePageSizeForExistingModifiers();
    });

    $(document).on("click",".close-add-modal",function(){
      $("#ExistingModifierListSearch").val("");
      selectedExistingModifiers = [];
    });

    function changePageSizeForExistingModifiers(pagNum) {
      let pagesize = $('#selectpagesizeForExistingModifiers').val();
      let search = $('#ExistingModifierListSearch').val();

      $.ajax({
        url: '@Url.Action("ItemsByExistingModifier", "Menu")',
        type: "GET",
        data: { pageSize: pagesize, pageNo: pagNum, searchKey: search },
        dataType: "html",
        success: function (data) {
          $('#existingmodifiermodals').html(data);
          console.log("selected:",selectedExistingModifiers);
          Tickcheckbox();
        },
        error: function () {
          $('#existingmodifiermodals').html("No Data Found");
        }
      });
    }
    
    
    //save existing modifier
    var selectedExistingModifiers = [];
    $(document).on("change", ".modifierItemCheckBox", function () {
    let id = $(this).data("deid");
    let name = $(this).data("dename");

    if ($(this).is(':checked')) {
        if (!selectedExistingModifiers.some(e => e.ModifierItemId === Number(id))) {
            selectedExistingModifiers.push({ ModifierItemId: Number(id), Name: name });
        }
    } else {
        selectedExistingModifiers = $.grep(selectedExistingModifiers, function (modifier) {
            return modifier.ModifierItemId !== Number(id);
        });
        $("span.existModifiers[data-deid='" + id + "']").remove(); 
    }
});


   function AppendModifiers(id, name) {
    $('.existingModifierLists').append(`
        <span class="p-1 me-2 fw-medium existModifiers" data-deid="${id}" data-dename="${name}" style="border: 1px solid grey; border-radius: 15px; margin-bottom: 20px; display: inline-block;">
            ${name}
            <button type="button" class="btn btn-close removeAddedModifierItem" data-deid="${id}"></button>
        </span>
    `);
}

function saveExistingModifiers() {
  $('.existingModifierLists').empty();
      $('#existingModifierModal').modal('hide');
      selectedExistingModifiers.forEach(modifier => {
        AppendModifiers(modifier.ModifierItemId, modifier.Name);
    });

    }


    //Remove Added Modifier Item
    $(document).on("click", ".removeAddedModifierItem", function () {
      let removeteModifierItemID = $(this).data("deid");
      selectedExistingModifiers = $.grep(selectedExistingModifiers, function (selectedExistingModifiers) {
        return selectedExistingModifiers.ModifierItemId !== removeteModifierItemID;
      });
      $("span").remove(".existModifiers[data-deid='" + removeteModifierItemID + "']");
    });

    $(document).on("click", "#submitMgBtn", function (e) {
      e.preventDefault();

      $("#existingItemList").val(JSON.stringify(selectedExistingModifiers));

      var form = $("#submitModifierGroupForm")[0];
      var formData = new FormData(form);

      console.log("form-data:", formData);

      $.ajax({
        url: form.action,
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
          $('#modifierModal').modal('hide');
          $('#modifierModal').empty();
          location.reload();
        },
        error: function () {
          console.log("Error saving item.");
        }
      });
    });

    $(document).on("click", "#submitMgBtnForEditModifier", function (e) {
      e.preventDefault();


      $("#existingModifierItemList").val(JSON.stringify(selectedExistingModifiers));

      var form = $("#submitModifierGroupFormForEdit")[0];
      var formData = new FormData(form);

      console.log("form-data:", formData);

      $.ajax({
        url: form.action,
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {

          $('#editModifier').modal('hide');
          location.reload();
        },
        error: function () {
          console.log("Error saving item.");
        }
      });
    });

    @* $('.editmodifiergroup').on('click',function(){
      selectedExistingModifiers = [];
      $('.existModifiers').each(function(){
        selectedExistingModifiers.push({ ModifierItemId: $(this).data("mgitemid"), Name: $(this).data("mgitemname") });
    });
    console.log("select existing modifiers:"selectedExistingModifiers);
    }) *@

      $(document).on("click", ".removeAddedModifierItemForEdit", function () {
        let removeteModifierItemIDForEdit = $(this).data("mgitemid");
        console.log("removeteModifierItemIDForEdit:", removeteModifierItemIDForEdit);
        selectedExistingModifiers = $.grep(selectedExistingModifiers, function (selectedExistingModifiers) {
          return selectedExistingModifiers.ModifierItemId !== removeteModifierItemIDForEdit;
        });
        $("span").remove(".existModifiersForEdit[data-mgitemid='" + removeteModifierItemIDForEdit + "']");
      });

  </script>

  <!-- Category Pagination-->
  <script>
    let selectedModifiers = [];

    function getModifierItemAjax(modifierGroupId) {
      $.ajax({
        url: '@Url.Action("GetModifierItemById", "Menu")',
        type: "GET",
        dataType: 'html',
        data: { modifierId: modifierGroupId },
        success: function (data) {
          console.log("data", data);
          $("#mgItemList").append(data);
          bindMinMaxEvents();
          $(".MinAllowed").trigger("change");
          $(".MaxAllowed").trigger("change");
        },
        error: function () {
          console.log("Error Appending Data");
        }
      });
    }

 function bindMinMaxEvents() {
 $(".MinAllowed").off("change").on("change", function () {
  let minVal = parseInt($(this).val());
  let id = $(this).data("mgitemid");
  let $maxSelect = $('.MaxAllowed[data-mgitemid="' + id + '"]');
  let total = $maxSelect.data("total");

  let currentMaxVal = parseInt($maxSelect.val());

  $maxSelect.empty();
  for (let i = minVal; i <= total; i++) {
    let option = new Option(i, i);
    if (i === currentMaxVal) option.selected = true;
    $maxSelect.append(option);
  }

  if (currentMaxVal < minVal) {
    $maxSelect.val(minVal);
  }
});


  $(".MaxAllowed").off("change").on("change", function () {
    let maxVal = parseInt($(this).val());
    let id = $(this).data("mgitemid");
    let $minSelect = $('.MinAllowed[data-mgitemid="' + id + '"]');

    let currentMinVal = parseInt($minSelect.val());

    $minSelect.empty();
    for (let i = 0; i <= maxVal; i++) {
      let option = new Option(i, i);
      if (i === currentMinVal) option.selected = true;
      $minSelect.append(option);
    }

    if (currentMinVal > maxVal) {
      $minSelect.val(maxVal);
    }
  });
}


    $(document).on("change", "#selectModifiers", function () {
      var modifierGroupId = Number($(this).val());

      // Check using includes() since it's an array of numbers now
      if (!selectedModifiers.includes(modifierGroupId)) {
        selectedModifiers.push(modifierGroupId);
        getModifierItemAjax(modifierGroupId);
      }
      console.log(selectedModifiers);

      $("#selectModifiers").val("-2");
    });

    // Remove Modifier Group
    $(document).on("click", ".removeModifierGroup", function () {
      let removeModifierGroupID = Number($(this).data("mgitemid"));
      selectedModifiers = selectedModifiers.filter(function (id) {
        return id !== removeModifierGroupID;
      });
      $("div").remove(".selectedModifierGroup[data-mgitemid='" + removeModifierGroupID + "']");
    });
  </script>

  <!-- Edit Item selectedCategoryId modifier -->

  <script>
    let selectedModifiersForEdit = [];

    function getModifierItemForEditAjax(modifierGroupId) {
      $.ajax({
        url: '@Url.Action("GetModifierItemById", "Menu")',
        type: "GET",
        dataType: 'html',
        data: { modifierId: modifierGroupId },
        success: function (data) {
          $("#mgItemLists").append(data);
             bindMinMaxEvents();
            $(".MinAllowed").trigger("change");
            $(".MaxAllowed").trigger("change");
         },
        error: function () {
          console.log("Error Appending Data");
        }
      });
    }

    $(document).on("change", "#selectModifiers", function () {
      var modifierGroupId = Number($(this).val());

      // Check using includes() since it's an array of numbers now
      if (!selectedModifiersForEdit.includes(modifierGroupId)) {
        selectedModifiersForEdit.push(modifierGroupId);
        getModifierItemForEditAjax(modifierGroupId);
      }
      console.log(selectedModifiersForEdit);

      $("#selectModifiers").val("-2");
    });

    // Remove Modifier Group
    $(document).on("click", ".removeModifierGroup", function () {
      let removeModifierGroupID = Number($(this).data("mgitemid"));
      selectedModifiers = selectedModifiers.filter(function (id) {
        return id !== removeModifierGroupID;
      });
      $("div").remove(".selectedModifierGroup[data-mgitemid='" + removeModifierGroupID + "']");
    });
  </script>

    <script>
      var selectedModifiersItem = [];
      function SubmitAddItem() {
        $(".selectedModifierGroup").each(function (e) {
          var id = $(this).data("mgitemid");
          var minallowed = Number($('.MinAllowed[data-mgitemid="' + id + '"]').val());
          var maxAllowed = Number($('.MaxAllowed[data-mgitemid="' + id + '"]').val());

          selectedModifiersItem.push({
            ModifierGroupId: id,
            MinAllowed:minallowed,
            MaxAllowed: maxAllowed,
          })
        })
        $("#selectedModifierList").val(JSON.stringify(selectedModifiersItem));
      }
    </script>

 <script>
      $(document).on("click", "#submitAddItemBtn", function () {
      SubmitAddItem();

      var form = $("#addItemForm");
      var formData = new FormData(form[0]);

      $.ajax({
        url:form.attr("action"),
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success:function(response){
          if(response.success){
            $("#AddItem").modal('hide');
            selectedModifiersItem = [];
            toastr.success("Item Added Succesfuly");
          }
          else{
            $("#AddItem").modal('show');
          }
        },
        error: function () {
          console.log("Error saving item.");
        }
      });
    }); 
  </script> 

    @*Edit Menu-Item Post *@
    <script>
     $(document).on("click", "#submitEditItemBtn", function (e) {
     SubmitAddItemForEdit();

    var form = $("#editItemForm");
    var formData = new FormData(form[0]);

    console.log("form-data-FOR-EDIT:", formData);

    $.ajax({
        url: "/Menu/EditItems",
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            if (response.success) {
                $("#editItemModal").modal('hide');
                toastr.success("Item Edited Successfully");
            } else {
                $("#editItemModal").modal('show');
                toastr.error("Failed to edit item.");
            }
        },
        error: function () {
            console.log("Error saving item.");
        }
        });
    });
    </script> 

  <script>
    //delete single item
    $(document).on('click', '.delete-item', function () {
      var itemId = $(this).data('itemid');
      console.log(itemId);
      $('#ItemId').val(itemId);
    });

    //ajax for menu-items

    var selectedcataegoryId;
    $(document).ready(function () {
      $(document).on("click", ".categorygroupbtn", function () {
        selectedcataegoryId = $(this).data("category-id");
        console.log("Selected Modifier ID:", selectedcataegoryId);
    @* changePageSizeForModifiers(); *@
          changePageSizeForItems();
      });
    });

    function changePageSizeForItems() {
      let pagesize = $('#selectpagesizeForItems').val();
      let search = $('#itemsearch').val();

      $.ajax({
        url: '@Url.Action("ItemsByCategory", "Menu")',
        type: "GET",
        data: { id: selectedcataegoryId, pageSize: pagesize, pageNo: 1, searchKey: search },
        dataType: "html",
        success: function (data) {
          $('#items-container-table').html(data);
        },
        error: function () {
          $('#items-container-table').html("No Data Found");
        }
      });
    }

    function changePageForItem(pageNum) {
      let pagesize = $('#selectpagesizeForItems').val();
      let search = $('#itemsearch').val();

      $.ajax({
        url: '@Url.Action("ItemsByCategory", "Menu")',
        type: "GET",
        data: { id: selectedcataegoryId, pageSize: pagesize, pageNo: pageNum, searchKey: search },
        dataType: "html",
        success: function (data) {
          $('#items-container-table').html(data);
        },
        error: function () {
          $('#items-container-table').html("No Data Found");
        }
      });
    }

// used for mass delete item
    function getSelectedIds() {
      let selectedIds = [];

      $(".inner-check:checked").each(function () {
        let id = $(this).data("deleteid");
        if (id !== undefined) {
          selectedIds.push(id);
        }
      });
      console.log("id", selectedIds);
      return selectedIds;

    }

 @*Item Mass Delte*@
    $(document).ready(function () {

      $(document).on('click', '#delete-icon-massdelete', function () {
        var listOfItemsId = getSelectedIds();
        console.log("item:", listOfItemsId);
        $('#itemListForDelete').html(listOfItemsId.join(','));
      });


      $('#deleteFormMass').on('submit', function (event) {
        event.preventDefault();

        let itemLists = Array.from(getSelectedIds());
        console.log("items:", itemLists);

        var formData = new FormData();
        itemLists.forEach(function (id) {
          formData.append('itemList', id);
        });

        $.ajax({
          url: '/Menu/DeleteCombine',
          type: 'POST',
          data: formData,
          processData: false,
          contentType: false,
          success: function (data) {
            console.log("Response:", data);
            var categoryId = $(this).data("#CategotyIdForMassDelete");
            var pageSize = $('#selectpagesizeForItems').val();
            var searchKey = encodeURIComponent($('#search-input').val() || '');
            var url = `/Menu/Items?id=${categoryId}&pageNo=1&pageSize=${pageSize}`;
            window.location.href = url;

          },
          error: function (xhr, status, error) {
            console.error("Error deleting items:", xhr.responseText);
            alert("An error occurred while deleting the items.");
            $('#deleteItemModalForMass').modal('hide');
          }
        });
      });
    });

//Item Chechboxes

    $(document).ready(function () {
      const outerCheck = document.getElementById("outerCheckForItem");
      const innerChecks = document.querySelectorAll(".inner-check");

      if (!outerCheck) {
        console.error("Outer checkbox not found.");
        return;
      }

      outerCheck.addEventListener("change", function () {
        innerChecks.forEach(checkbox => {
          checkbox.checked = outerCheck.checked;
          console.log(`Checkbox ${checkbox.id} checked: ${checkbox.checked}`);
        });
      });

      innerChecks.forEach(checkbox => {
        checkbox.addEventListener("change", function () {
          const allChecked = [...innerChecks].every(cb => cb.checked);
          const anyChecked = [...innerChecks].some(cb => cb.checked);

          outerCheck.checked = allChecked;
          outerCheck.indeterminate = !allChecked && anyChecked;
          console.log(`Outer checkbox state: ${outerCheck.checked}, Indeterminate: ${outerCheck.indeterminate}`);
        });
      });
    });

    //when Available switch is toggled

     $(document).on('change', '.item-available-switch', function () {
    var $switch = $(this); 
    var itemId = $switch.data("itemid");
    var newAvailable = $switch.prop('checked'); 

    $.ajax({
        url: '@Url.Action("EditItemAvailabity", "Menu")', 
        type: 'POST',
        data: { id: itemId, isAvailable: newAvailable },
        success: function (data) {
            if (data.success) {
                toastr.success("Item updated successfully");
            } else {
                toastr.error("Failed to update item: " + data.message); 
            }
        },
        error: function (xhr, status, error) {
            toastr.error("Error updating item: " + error); 
        }
    });
});


  </script>
}

<!-- edit category -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form method="post" asp-controller="Menu" asp-action="EditCategory" class="modal-content" id="addItemForm" >
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel1">Edit Category</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex flex-column gap-2">
          <div class="form-floating">
            <input type="hidden" id="CategoryId" asp-for="@Model.AddCategory.CategoryId" >
            <input type="text" class="form-control" id="editforname" asp-for ="@Model.AddCategory.CategoryName" placeholder="Category Name">
            <label for="editforname">Name</label>
            <span asp-validation-for="@Model.AddCategory.CategoryName" class="text-danger"></span>
          </div>
          <div class="form-floating">
            <input type="text" class="form-control" id="editfordescription" asp-for ="@Model.AddCategory.Description"
              placeholder="Description">
            <label for="editfordescription">Description</label>
            <span asp-validation-for="@Model.AddCategory.Description" class="text-danger"></span>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="resetForm()">Cancel</button>
      </div>
    </form>
  </div>
</div>

<script>
  $(document).on('click', '.delete-category', function () {
    var categoryId = $(this).data('category1-id');
    console.log(categoryId);
    $('#CategoryId1').val(categoryId);
  });

  $(document).on('click', '.delete-modifier', function () {
    var modifierId = $(this).data('modifier-delete-id');
    console.log(modifierId);
    $('#ModifierId').val(modifierId);
  });

</script>

<!--delete category -->
<div class="modal fade" id="deleteModal1" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex justify-content-center align-items-center flex-column">
        @* <img class="" src="~/images/icons/exclamation-triangle.svg" alt=""> *@
        <h1 class="fs-5">Are You Sure you want to delete Category ?</h1>
      </div>
      <form method="post" asp-controller="Menu" asp-action="DeleteCategory"
        class="modal-footer d-flex justify-content-center">
        <input type="hidden" name="id" id="CategoryId1" />
        <button type="submit" class="btn btn-primary">Yes</button>
        <button type="button" class="btn btn-outline-primary">No</button>
      </form>
    </div>
  </div>
</div>

<!--Add Category -->
<div class="modal fade" id="exampleModal1" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form method="post" asp-controller="Menu" asp-action="AddCategory" class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel1">Add Category</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex flex-column gap-2">
          <div class="form-floating">
            <input type="text" class="form-control" id="floatingInput" asp-for="@Model.AddCategory.CategoryName" placeholder="Category Name">
            <label for="floatingInput">Name</label>
            <span asp-validation-for="@Model.AddCategory.CategoryName" class="text-danger"></span>
          </div>
          <div class="form-floating">
            <input type="text" class="form-control" id="floatingInput"  asp-for="@Model.AddCategory.Description" placeholder="Description">
            <label for="floatingInput">Description</label>
            <span asp-validation-for="@Model.AddCategory.Description" class="text-danger"></span>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="resetForm()">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!--Delte Category -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex justify-content-center align-items-center flex-column">
        @* <img class="" src="~/images/icons/exclamation-triangle.svg" alt=""> *@
        <h1 class="fs-5">Are You Sure you want to delete Category ?</h1>
      </div>
      <div class="modal-footer d-flex justify-content-center">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Yes</button>
        <button type="button" class="btn btn-outline-primary">No</button>
      </div>
    </div>
  </div>
</div>

<!--Add Item -->

<div class="modal fade" id="AddItem" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <form method="post" enctype="multipart/form-data" asp-controller="Menu" asp-action="Items" class="modal-content" id="addItemForm">
      <input type="hidden" id="selectedModifierList" name="modifierItemList">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Add New Menu Item</h1>
        <button type="button" class="btn-close add-item-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="conatainer-fluid">
          <div class="row">
            <div class="col-lg-8 col-12">
              <div class="row mb-3">
                <div class="col-lg-6 col-md-6 mb-md-3 mb-3">
                  <div class="form-floating">
                    <select class="form-select" id="categorySelect" asp-for="@Model.Additem.Categoryid"
                      aria-label="Floating label select example">
                      <option value="">Select Category</option>
                      @foreach (var category in Model.Categories)
                      {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                      }
                    </select>
                    <label for="categorySelect">Category</label>
                  </div>
                </div>
                <div class="col-lg-6 col-md-6 mb-md-3">
                  <div class="form-floating">
                    <input asp-for="@Model.Additem.Itemname" type="text" class="form-control" id="floatingInput"
                      placeholder="name@example.com">
                    <label asp-for="@Model.Additem.Itemname" for="floatingInput">Name</label>
                    <span asp-validation-for="@Model.Additem.Itemname" class="text-danger"></span>
                  </div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="col-lg-3 col-md-6 mb-md-3 mb-3 ">
                  <div class="form-floating">
                    <select class="form-select" id="floatingSelect" aria-label="Floating label select example"
                      asp-for="@Model.Additem.Itemtype">
                      <option selected>Select Type</option>
                      <option value="veg">Veg</option>
                      <option value="non-veg">Non-veg</option>
                    </select>
                    <label for="floatingSelect">Item Type</label>
                    <span asp-validation-for="@Model.Additem.Itemtype" class="text-danger"></span>
                  </div>
                </div>
                <div class="col-lg-3 col-md-6 mb-md-3 mb-3">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="floatingInput" placeholder="name@example.com"
                      asp-for="@Model.Additem.Rate">
                    <label for="floatingInput">Rate</label>
                    <span asp-validation-for="@Model.Additem.Rate" class="text-danger"></span>
                  </div>
                </div>
                <div class="col-lg-3 col-md-6 mb-3">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="floatingInput" placeholder="name@example.com"
                      asp-for="@Model.Additem.Quantity">
                    <label for="floatingInput">Quantity</label>
                    <span asp-validation-for="@Model.Additem.Quantity" class="text-danger"></span>
                  </div>
                </div>
                <div class="col-lg-3 col-md-6 mb-3">
                  <div class="form-floating">
                    <select class="form-select" id="floatingSelect" aria-label="Floating label select example"
                      asp-for="@Model.Additem.Unit">
                      <option selected>Select a Unit</option>
                      @foreach (var unit in Model.units)
                      {
                        <option value="@unit.Unitid">@unit.Unitname</option>
                      }
                    </select>
                    <label for="floatingSelect">Unit</label>
                  </div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="col-lg-3 col-md-6 col-6 gap-1">
                  <div class="form-check form-switch d-flex align-items-center gap-1 ms-lg-2 mb-3">
                    <input style="height: 30px; width: 60px;" class="form-check-input" type="checkbox" role="switch"
                      id="flexSwitchCheckChecked" asp-for="@Model.Additem.IsAvailable" value="true">
                    <span> Available </span>
                  </div>
                </div>
                <div class="col-lg-3 col-md-6 col-6">
                  <div class="form-check form-switch d-flex align-items-center gap-1 ms-lg-2">
                    <input style="height: 30px; width: 60px;" class="form-check-input" type="checkbox" role="switch"
                      id="flexSwitchCheckChecked" asp-for="@Model.Additem.IsDefaultTax" value="true">
                    <span class="">DefaultTax</span>
                  </div>
                </div>
                <div class="col-lg-3 col-md-6 col-12 mb-3">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="floatingInput" asp-for="@Model.Additem.TaxPercentage"
                      placeholder="name@example.com">
                    <label for="floatingInput">Tax Percentage</label>
                    <span asp-validation-for="@Model.Additem.TaxPercentage" class="text-danger"></span>
                  </div>
                </div>
                <div class="col-lg-3 col-md-6 col-12">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="floatingInput" asp-for="@Model.Additem.ShortCode"
                      placeholder="name@example.com">
                    <label for="floatingInput">Short Code</label>
                    <span asp-validation-for="@Model.Additem.ShortCode" class="text-danger"></span>
                  </div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="col">
                  <textarea class="form-control" style="height: 80px;" type="text" asp-for="@Model.Additem.Description"
                    placeholder="Description"></textarea>
                </div>
              </div>

            <div class="row mb-3">
          <div class="col-12">
        <span>Upload Image</span>
       <div class="image-upload-container" style="height: 100px; display: flex; flex-direction: column; align-items: center; justify-content: center; border: 2px dashed #ccc; border-radius: 10px; padding: 10px;">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-arrow-up" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708z" />
        <path d="M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383m.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z" />
      </svg>
      <span id="uploadText">Drag and drop or Browse file</span>
      <input type="file" style="opacity: 0; position: absolute;" asp-for="@Model.Additem.ItemImage" id="imageUpload" onchange="previewImage(event)">
      <img id="imagePreview" src="#" alt="Image Preview" style="display: none; max-width: 80%; max-height: 80%; object-fit: contain; margin-top: 10px;" />
       </div>
          </div>
            </div>
            </div>
            <!-- Modifier Groups -->
            <div class="col-lg-4 d-lg-block  pt-3" style="background-color: #FDF5E6;">
              <!-- Modifiers Group List -->
              <select class="form-select " id="selectModifiers">
                <option value="-2">Select Modifiers Groups(s) </option>
                @foreach (var modifierGroup in Model.Modifiers)
                {
                  <option value="@modifierGroup.ModifierId">@modifierGroup.Name</option>
                }
              </select>
              <div id="mgItemList">

              </div>
            </div>
            <!-- section for modifier Item -->

          </div>
        </div>
      </div>

      <div class="modal-footer">
        <button type="submit" id="submitAddItemBtn" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary add-item-close">Cancel</button>
      </div>
    </form>
  </div>
</div>

<script>
  function previewImage(event) {
    const input = event.target;
    const preview = document.getElementById('imagePreview');

    if (input.files && input.files[0]) {
      const reader = new FileReader();

      reader.onload = function(e) {
        preview.src = e.target.result;
        preview.style.display = 'block';
         uploadText.style.display = 'none';
      }

      reader.readAsDataURL(input.files[0]);
    } else {
      preview.src = '#';
      preview.style.display = 'none';
       uploadText.style.display = 'block';
    }
  }
</script>

<script>
  function previewImageForEdit(event) {
    const inputForEdit = event.target;
    const previewForEdit = document.getElementById('imagePreviewForEdit');
    const uploadTextForEdit = document.getElementById('uploadTextForEdit'); 

    if (inputForEdit.files && inputForEdit.files[0]) {
      const readers = new FileReader();

      readers.onload = function(e) {
        previewForEdit.src = e.target.result;
        previewForEdit.style.display = 'block';
        uploadTextForEdit.style.display = 'none';
      }

      readers.readAsDataURL(inputForEdit.files[0]);
    } else {
      previewForEdit.src = '#';
      previewForEdit.style.display = 'none';
      uploadTextForEdit.style.display = 'block';
    }
  }
</script>

<!--edit item -->
<div class="modal fade" id="editItemModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl editt-modal">
    <div class="modal-content" id="modal-size">
    </div>
  </div>
</div>

<!-- delete item modal  !-->

<div class="modal fade" id="deleteItemModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex justify-content-center align-items-center flex-column">
        @* <img class="" src="~/images/icons/exclamation-triangle.svg" alt=""> *@
        <h1 class="fs-5">Are You Sure you want to delete item ?</h1>
      </div>
      <form asp-action="MenuListItemDelete" method="post" class="modal-footer d-flex justify-content-center">
        <input type="text" name="id" id="ItemId" hidden>
        <input type="hidden" name="itemList" id="ItemList" hidden>
        <button type="submit" class="btn btn-primary">Yes</button>
        <button type="button" class="btn btn-outline-primary">No</button>
      </form>
    </div>
  </div>
</div>

<!-- Mass Item delete !-->

<div class="modal fade" id="deleteItemModalForMass" tabindex="-1" aria-labelledby="exampleModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex justify-content-center align-items-center flex-column">
        <img class="" src="images/icons/exclamation-triangle.svg" alt="">
        <h1 class="fs-5">Are You Sure you want to delete the selected item(s)? for Mass</h1>
      </div>
      <div id="itemListForDelete">

      </div>
      <form id="deleteFormMass" method="post" class="modal-footer d-flex justify-content-center">
        <button type="submit" class="btn btn-primary">Yes</button>
        <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
      </form>
    </div>
  </div>
</div>

<!-- Add Modifier Group Modal -->

<div class="modal fade" id="modifierModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <form method="post" action="AddModifier" id="submitModifierGroupForm" class="modal-content ">
      <input type="hidden" id="existingItemList" name="modifierList">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel1">Add Modifier</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="d-flex flex-column gap-2">
          <div class="form-floating">
            <input type="text" class="form-control" asp-for="@Model.AddModifierGroup.Name"  placeholder="Name" required>
            <span asp-validation-for="@Model.AddModifierGroup.Name" class="text-danger"></span>
            <label for="modifierName">Name</label>
          </div>
          <div class="form-floating">
            <input type="text" class="form-control" asp-for="@Model.AddModifierGroup.Description"  id="modifierDescription"
              placeholder="Description">
            <label for="modifierDescription">Description</label>
          </div>
        </div>
      </div>
      <div>
        <a class="btn text-primary existingmodifierbutton" data-bs-target="#existingModifierModal"
          data-bs-toggle="modal">+
          Add Existing Modifiers</a>
      </div>
      <div class="existingModifierLists mb-3 ms-3 mt-2 "></div>
      <div class="modal-footer">
        <button type="button" id="submitMgBtn" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="resetForm()">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Edit Modifier Group Modal -->
<div class="modal fade" id="editModifier" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <form method="post" asp-controller="Menu" id="submitModifierGroupFormForEdit" asp-action="EditModifier"
      class="modal-content">
      <input type="hidden" id="existingModifierItemList" name="ExistingmodifierList">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel1">Edit Modifier</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex flex-column gap-2">
          <div class="form-floating">
            <input type="hidden" id="ModifiergId" asp-for="@Model.AddModifierGroup.ModifierId">
            <input type="text" class="form-control" id="editformgname" asp-for="@Model.AddModifierGroup.Name" placeholder="Category Name">
            <label for="editforname">Name</label>
            <span asp-validation-for="@Model.AddModifierGroup.Name" class="text-danger"></span>
          </div>
          <div class="form-floating">
            <input type="text" class="form-control" id="editformgdescription" asp-for="@Model.AddModifierGroup.Description" 
              placeholder="Description">
            <label for="editfordescription">Description</label>
          </div>
        </div>
      </div>
      <div>
        <a class="btn text-primary existingmodifierbutton" data-bs-target="#existingModifierModal"
          data-bs-toggle="modal">+
          Add Existing Modifiers</a>
      </div>
      <div class="ps-3 pt-2 existingModifierLists" >
          @* <div class=" d-flex align-items-center gap-3 ps-4 justify-content-start mt-5">
        <div class=" d-flex justify-content-start position-relative align-items-center ">
          <div class="d-flex justify-content-end position-relative align-items-center">
            <input type="text" class="search form-control " style="height: 50px;" id="ExistingModifierListSearch"
              placeholder="Search" />
            <img src="~/images/icons/search.svg" alt="" style="width: 20px; aspect-ratio: 1"
              class="bg-white position-absolute rounded-2 m-2" onclick="itemSearch()"/>
          </div>
        </div>
        </div> *@
        <div id="existingModifierList">

        </div>
    

      </div>
      
        @* <div class="existingModifierLists mb-3 ms-3 mt-2 "></div> *@
      
      <div class="modal-footer">
        <button type="submit" id="submitMgBtnForEditModifier" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" onclick="resetForm()">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Add Existing  Modifier Group Modal -->
<div class="modal fade" tabindex="-1" id="existingModifierModal" aria-labelleby="modal-title">
  <div class="modal-dialog modal-dialog-centered modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add Existing Modifer Group</h5>
        <button type="button" class="btn-close close-add-modal " data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
     
      <div class="modal-body" >
         <div class=" d-flex align-items-center gap-3  justify-content-start mt-5">
        <div class=" d-flex justify-content-start position-relative align-items-center ">
          <div class="d-flex justify-content-end position-relative align-items-center">
            <input type="text" class="search form-control " style="height: 50px; width: 250px;" id="ExistingModifierListSearch"
              placeholder="Search" />
            <img src="~/images/icons/search.svg" alt="" style="width: 20px; aspect-ratio: 1"
              class="bg-white position-absolute rounded-2 m-2"/>
          </div>
        </div>
    </div>
      </div>
      <div id="existingmodifiermodals" ></div>
      <div class="modal-footer d-flex justify-content-start ">
        <button type="submit" onclick="saveExistingModifiers()" class="btn btn-primary">Add</button>
        <button type="button" class="btn btn-secondary close-add-modal" data-bs-dismiss="modal">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Modifier Group Modal -->

<div class="modal fade" id="deleteModalformodifier" tabindex="-1" aria-labelledby="exampleModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex justify-content-center align-items-center flex-column">
        @* <img class="" src="~/images/icons/exclamation-triangle.svg" alt=""> *@
        <h1 class="fs-5">Are You Sure you want to delete Modifer ?</h1>
      </div>
      <form method="post" asp-controller="Menu" asp-action="DeleteModifer"
        class="modal-footer d-flex justify-content-center">
        <input type="hidden" name="id" id="ModifierId" />
        <button type="submit" class="btn btn-primary">Yes</button>
        <button type="button" class="btn btn-outline-primary">No</button>
      </form>
    </div>
  </div>
</div>

<!-- Delete Modifier Item Modal -->

<div class="modal fade" id="deleteModifierModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex justify-content-center align-items-center flex-column">
        @* <img class="" src="~/images/icons/exclamation-triangle.svg" alt=""> *@
        <h1 class="fs-5">Are You Sure you want to delete Modifer ?</h1>
      </div>
      <form method="post" asp-controller="Menu" asp-action="DeleteModifierItem"
        class="modal-footer d-flex justify-content-center">
        <input type="hidden" name="id" id="ModifierItemId" />
        <input type="hidden" name="modifiergroupId" id="ModifierGroupId" />
        <button type="submit" class="btn btn-primary">Yes</button>
        <button type="button" class="btn btn-outline-primary">No</button>
      </form>
    </div>
  </div>
</div>

<!-- Add Modifier Item Modal -->

<div class="modal fade" id="addmodifieritemmodal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <form method="post" asp-controller="Menu" asp-action="AddModifierItem" class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Add New Modifier</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="conatainer-fluid">
          <div class="row">
            <div class="col-lg-12 col-12">
              <div class="row mb-3">
                <div class="col">
                  <div class="form-floating">
                    <select class="form-select" asp-for="@Model.AddModifier.ModifierGroupId" id="autoSizingSelect">
                      <option selected>Select Modifiers Groups(s) </option>
                      @foreach (var m in @Model.Modifiers)
                      {
                        <option value=@m.ModifierId>@m.Name</option>
                      }
                    </select>
                    <label for="categorySelect">Modifiers</label>
                  </div>
                </div>
                <div class="col">
                  <div class="form-floating">
                    <input asp-for="@Model.AddModifier.ModifierName" type="text" class="form-control" id="floatingInput"
                      placeholder="name@example.com">
                    <span asp-validation-for="@Model.AddModifier.ModifierName" class="text-danger"></span>
                    <label for="floatingInput">Name</label>
                  </div>
                </div>
              </div>
              <div class="row mb-3">

                <div class="col-lg-4 col-md-6 mb-md-3 mb-3">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="floatingInput" placeholder="name@example.com"
                      asp-for="@Model.AddModifier.Rate">
                      <span asp-validation-for="@Model.AddModifier.Rate" class="text-danger"></span>
                    <label for="floatingInput">Rate</label>
                  </div>
                </div>
                <div class="col-lg-4 col-md-6 mb-3">
                  <div class="form-floating">
                    <input type="text" class="form-control" id="floatingInput" placeholder="name@example.com"
                      asp-for="@Model.AddModifier.Quantity">
                      <span asp-validation-for="@Model.AddModifier.Quantity" class="text-danger"></span>
                    <label for="floatingInput">Quantity</label>
                  </div>
                </div>
                <div class="col-lg-4 col-md-6 mb-3">
                  <div class="form-floating">
                    <select class="form-select" id="floatingSelect" aria-label="Floating label select example"
                      asp-for="@Model.AddModifier.UnitId">
                      <option selected>Select a Unit</option>
                      @foreach (var unit in Model.units)
                      {
                        <option value="@unit.Unitid">@unit.Unitname</option>
                      }
                    </select>
                    <span asp-validation-for="@Model.AddModifier.Unit" class="text-danger"></span>
                    <label for="floatingSelect">Unit</label>
                  </div>
                </div>
              </div>

              <div class="row mb-3">
                <div class="col">
                  <textarea class="form-control" style="height: 80px;" type="text"
                    asp-for="@Model.AddModifier.Description" placeholder="Description"></textarea>
                </div>
              </div>

            </div>
          </div>
        </div>
      </div>

      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Edit Modifier Item Modal -->

<div class="modal fade" id="Editmodifieritemmodal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content" id="edit-modal-size">

    </div>
  </div>
</div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>


<script>
 $(document).ready(function () {
          
             @if (TempData["AddCategorySuccess"] != null && (bool)TempData["AddCategorySuccess"])
            {
                <text>
                    showToastrNotification('success', 'Category Added successfully!');
                </text>
            }
             @if (TempData["EditCategorySuccess"] != null && (bool)TempData["EditCategorySuccess"])
            {
                <text>
                    showToastrNotification('success', 'Category Edit successfully!');
                </text>
            }
             @if (TempData["DeleteCategorySuccess"] != null && (bool)TempData["DeleteCategorySuccess"])
            {
                <text>
                    showToastrNotification('success', 'Category Delete successfully!');
                </text>
            }
             @if (TempData["AddItemSuccess"] != null && (bool)TempData["AddItemSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Item Added successfully!');
                </text>
            }
             @if (TempData["EditItemSuccess"] != null && (bool)TempData["EditItemSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Item Edit successfully!');
                </text>
            }
             @if (TempData["DeleteItemSuccess"] != null && (bool)TempData["DeleteItemSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Item Delete successfully!');
                </text>
            }
             @if (TempData["AddModifierSuccess"] != null && (bool)TempData["AddModifierSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Modifier Group Added successfully!');
                </text>
            }
             @if (TempData["EditModifierSuccess"] != null && (bool)TempData["EditModifierSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Modifier Group Edit successfully!');
                </text>
            }
             @if (TempData["DeleteModifierSuccess"] != null && (bool)TempData["DeleteModifierSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Modifier Group Delete successfully!');
                </text>
            }
             @if (TempData["AddModifierItemSuccess"] != null && (bool)TempData["AddModifierItemSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Modifier Item Added successfully!');
                </text>
            }
             @if (TempData["EditModifierItemSuccess"] != null && (bool)TempData["EditModifierItemSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Modifier Item Edit successfully!');
                </text>
            }
             @if (TempData["DeleteModifierItemSuccess"] != null && (bool)TempData["DeleteModifierItemSuccess"])
            {
                <text>
                    showToastrNotification('success', 'Modifier Delete successfully!');
                </text>
            }
        });
</Script>