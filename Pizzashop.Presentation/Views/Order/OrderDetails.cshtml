@model DAL.Models.Order
@using Microsoft.AspNetCore.Mvc
@{
    decimal TotalAmount = 0;
    decimal ExclusiveTax = 0;
}

<div class="container mt-0 ps-5 pe-5  d-flex justify-content-center">
    <div class="w-100" style="max-width: 1200px;">
        <div class="container">
            <div class="d-flex align-items-center justify-content-between mb-4">
                <h2 style="color: #0066a7;" class="fw-bold">Order Details</h2>
                <a href="@Url.Action("Order", "Order")" style="color: #0066a7; border: 2px solid #0066a7;"
                    class="btn">Back</a>
            </div>
        </div>


        <div>
            <!-- Order Summary Section -->
            <div class="card mb-4">
                <div class="card-header d-flex flex-column flex-md-row justify-content-between align-items-center">
                    <p class="mb-0 mb-2 mb-md-0 fw-bold fs-4">Order Summary <span
                            class="badge bg-success-subtle fs-6 text-success">@Model.StatusNavigation.Status</span></p>
                    <a class="btn w-auto  my-lg-0 px-4 d-flex align-items-center justify-content-center gap-2 text-white pdfinvoice"
                        data-orderid="@Model.Orderid" style="background-color:#0066a7">
                        <img src="~/images/icons/export-svgrepo-com (1).svg" width="25px">
                        Export
                    </a>
                    </button>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12 col-md-4 col-lg-4 col-xl-2 mb-2 text-nowrap">
                            <strong>Invoice No.:</strong> #@Model.InvoiceNo
                        </div>
                        <div class="col-12 col-md-4 col-lg-4 col-xl-2 mb-2">
                            <strong>Paid on:</strong> @Model.CreatedDate?.ToString("dd-MM-yyyy ")
                        </div>
                        <div class="col-12 col-md-4 col-lg-4 col-xl-2 mb-2  text-nowrap">
                            <strong>Placed on:</strong> @Model.CreatedDate?.ToString("dd-MM-yyyy ")
                        </div>
                        <div class="col-12 col-md-4 col-lg-4 col-xl-3 mb-2 text-nowrap">
                            <strong>Modified on:</strong> @Model.ModifiedDate?.ToString("dd-MM-yyyy ")
                        </div>
                        <div class="col-12 col-md-4 col-lg-4 col-xl-2 mb-2">
                            @if (Model.StatusNavigation.Status == "Completed" || Model.StatusNavigation.Status ==
                            "Cancelled")
                            {
                                <strong>Duration:</strong>

                                var duration = Model.ModifiedDate.HasValue && Model.CreatedDate.HasValue
                                ? (Model.ModifiedDate.Value - Model.CreatedDate.Value).ToString(@"hh\:mm\:ss")
                                : "N/A";

                                @duration
                            }
                            else
                            {
                                <strong>Duration:</strong>

                                var duration = Model.ModifiedDate.HasValue && Model.CreatedDate.HasValue
                                ? (Model.CreatedDate.Value - DateTime.Now).ToString(@"hh\:mm\:ss")
                                : "N/A";

                                @duration
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Customer and Table Details Section -->
            <div class="row mb-4">
                <!-- Customer Details -->
                <div class="col-12 col-md-6 mb-3 mb-md-2">
                    <div class="card h-100">
                        <div class="card-body">

                            <h5 class="mb-0 fw-bold fs-4 d-flex align-items-center"><img src="~/images/icons/person.svg"
                                    width="25px"></i>Customer
                                Details</h5><br>
                            <p class="mb-0"><strong>Name:</strong> @Model.Customer?.Customername</p>
                            <p class="mb-0"><strong>Phone:</strong> @Model.Customer?.Phonenumber</p>
                            <p class="mb-0"><strong>No of Persons:</strong> @Model?.NoOfPerson</p>
                            <p class="mb-0"><strong>Email:</strong> @Model.Customer?.Customeremail</p>
                        </div>
                    </div>
                </div>

                <!-- Table Details -->
                <div class="col-12 col-md-6 mb-3 mb-md-2">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="mb-0 fw-bold fs-4 d-flex align-items-cente gap-1"><img
                                    src="~/images/icons/dining-set-svgrepo-com.svg" width="25px">Table Details
                            </h5><br>
                            @if (Model.OrderTables.Any())
                            {
                                foreach (var orderTable in Model.OrderTables)
                                {
                                    <p class="mb-0"><strong>Table:</strong> @orderTable.Table?.TableName</p>
                                    <p class="mb-0"><strong>Section:</strong> @orderTable.Table?.Section?.SectionName</p>
                                }
                            }
                            else
                            {
                                <p>No table assigned</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Items Section -->
            <div class="card">
                <div class="card-body table-responsive">
                    <h5 class="mb-0 fw-bold fs-4">Order Items</h5><br>

                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Sr.No</th>
                                <th>Item</th>
                                <th>Quantity</th>
                                <th>Price</th>
                                <th>Total Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int srNo = 1;
                                decimal subtotal = 0;
                            }
                            @foreach (var item in Model.OrderItems)
                            {
                                <tr>
                                    <td class="text-start">@srNo</td>
                                    <td style="text-wrap: nowrap;">
                                        @item.Item?.Itemname
                                        @if (item.OrderItemModifiers.Any())
                                        {
                                            <ul class="mt-1">
                                                @foreach (var modifier in item.OrderItemModifiers)
                                                {
                                                    <li>@modifier.Modifier?.Modifiername</li>
                                                }
                                            </ul>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @item.Quantity
                                        @if (item.OrderItemModifiers.Any())
                                        {
                                            <ul class="list-unstyled mt-1">
                                                @foreach (var modifier in item.OrderItemModifiers)
                                                {
                                                    <li>@item.Quantity</li>
                                                }
                                            </ul>
                                        }
                                    </td>
                                    <td style="text-wrap: nowrap;">
                                        ₹ @item.Price.ToString()

                                        @if (item.OrderItemModifiers.Any())
                                        {
                                            <ul class="list-unstyled mt-1">
                                                @foreach (var modifier in item.OrderItemModifiers)
                                                {
                                                    <li>₹ @modifier.Price.ToString()</li>
                                                }
                                            </ul>
                                        }
                                    </td>
                                    @foreach (var itemtax in Model.OrderItems)
                                    {
                                        decimal ExclusiveTaxForItem = Math.Round((decimal)(itemtax.Price * itemtax.Quantity *
                                        itemtax.ItemTaxPercenetage) / 100, 2);
                                    }
                                    <td>
                                        ₹ @(item.Price * item.Quantity)

                                        @{
                                            decimal itemBaseprice = (decimal)(item.Price ?? 0) * (item.Quantity ?? 0);
                                            decimal itemExclusiveTax = Math.Round(itemBaseprice * (item.ItemTaxPercenetage ?? 0)
                                            / 100, 2);
                                        }

                                        <small class="text-muted">(Tax: ₹ @itemExclusiveTax.ToString("F2"))</small>

                                        @if (item.OrderItemModifiers.Any())
                                        {
                                            <ul class="list-unstyled mt-1">
                                                @foreach (var modifier in item.OrderItemModifiers)
                                                {
                                                    <li>₹ @(modifier.Price * item.Quantity)</li>
                                                }
                                            </ul>
                                        }
                                        @{
                                            decimal itemTotal = (decimal)(item.Price * item.Quantity);
                                            decimal modifierTotal = (decimal)item.OrderItemModifiers.Sum(m => item.Quantity *
                                            m.Price);
                                            decimal totalForRow = itemTotal + modifierTotal;
                                            subtotal += totalForRow;
                                        }
                                        @foreach (var itemtax in Model.OrderItems)
                                        {
                                            decimal ExclusiveTaxes = Math.Round((decimal)(itemtax.Price * itemtax.Quantity *
                                            itemtax.ItemTaxPercenetage) / 100, 2);
                                        }
                                    </td>
                                </tr>
                                srNo++;
                            }
                        </tbody>
                    </table>

                    <!-- Tax and Total Summary -->


                </div>
                <div class="text-end d-flex flex-column align-items-end me-3">
                    <p class="text-nowrap"><strong>Subtotal:</strong> ₹ @subtotal.ToString("F2")</p>
                    @foreach (var itemtax in Model.OrderItems)
                    {
                        ExclusiveTax += Math.Round((decimal)(itemtax.Price * itemtax.Quantity * itemtax.ItemTaxPercenetage)
                        / 100, 2);
                    }
                    <p class="text-nowrap"><strong>ExclusiveTax:</strong> ₹ @ExclusiveTax</p>
                    @if (Model.OrderTaxes.Any())
                    {
                        foreach (var tax in Model.OrderTaxes)
                        {
                            <p>
                                <strong class="fw-bold"> @tax.Tax?.Taxname : </strong>
                                @(Math.Round((tax.Tax?.TaxType ?? false ? (subtotal * tax.Tax?.Taxvalue ?? 0) / 100 :
                                    tax.Tax?.Taxvalue ?? 0), 2))
                                @{
                                    TotalAmount += Math.Round(tax.Tax?.TaxType ?? false ? (subtotal * tax.Tax?.Taxvalue ?? 0) / 100 :
                                    tax.Tax?.Taxvalue ?? 0, 2);
                                }
                            </p>
                        }
                    }
                    <p class="d-flex justify-content-end">
                        <strong>Total:</strong> ₹ @((subtotal + TotalAmount + ExclusiveTax).ToString("F2"))
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<style>
    .card {
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border: none;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .badge {
        font-size: 0.9em;
    }

    .table th,
    .table td {
        vertical-align: middle;
    }

    .text-end {
        font-size: 1.1em;
    }
</style>

<script>

    $(document).on('click', '.pdfinvoice', function () {
        var orderid = $(this).data("orderid");
        console.log("orderid:", orderid);

        $.ajax({
            url: '@Url.Action("Invoice", "Order")',
            type: "GET",
            data: { orderId: orderid },
            success: function (response) {
                var tempDiv = $("<div>").css({
                    "position": "absolute",
                    "left": "-9999px",
                    "top": "-9999px",
                    "width": "1000px",
                    "height": "auto",
                    "background": "white",
                    "z-index": "-1"
                }).html(response).appendTo("body");

                setTimeout(function () {
                    html2canvas(tempDiv[0], { scale: 2, useCORS: true }).then(function (canvas) {
                        var imgData = canvas.toDataURL("image/png");
                        var { jsPDF } = window.jspdf;
                        var pdf = new jsPDF("p", "mm", "a4");
                        var imgWidth = 210;
                        var imgHeight = (canvas.height * imgWidth) / canvas.width;
                        pdf.addImage(imgData, "PNG", 0, 0, imgWidth, imgHeight);
                        pdf.save("invoice_" + orderid + ".pdf");
                        tempDiv.remove();
                    }).catch(function (error) {
                        console.error("Error rendering canvas:", error);
                        toastr.error("Error generating PDF. Please try again.");
                        tempDiv.remove();
                    });
                }, 10);
            },
            error: function (xhr, status, error) {
                console.log("error", error);
            }
        });
    });

</script>
