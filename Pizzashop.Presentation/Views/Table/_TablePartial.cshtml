@model Pizzashop.DAL.ViewModels.Tableviewmodel



<div class=" mt-3 me-3 mb-4 table-responsive">
  <table class="table">
    <thead>
      <tr>
        <div>
          <th scope="col">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="" id="outercheckforTable">
              Name
            </div>
        </div>
        </th>
        <th scope="col" style="text-align: center;">Capacity</th>
        <th scope="col" style="text-align: center;">Status</th>
        <th scope="col">Action</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var tables in Model.TableItems)
      {
        <tr>
          <th scope="row">
            <div class="form-check gap-5">
              <input class="form-check-input inner-check-table-delete" type="checkbox" value="" id="flexCheckChecked"
                data-deletetableid="@tables.Tableid">
              <div class="d-flex align-items-center gap-1">
                <div class="d-flex align-items-center text-nowrap table-name">@tables.TableName</div>
              </div>
            </div>
          </th>
          <td style="text-align: center;">
            @tables.Capacity
          </td>
          <td style="text-align: center;">
            <span
              class="badge fw-bold fs-6 px-4 py-1 rounded-5 @((bool)tables.Isavailable ? "bg-success" : "bg-secondary")">
              @((bool)tables.Isavailable ? "Available" : "Occupied")
            </span>
          </td>

          <td>
            <img data-bs-toggle="modal" class="edittable" data-edittableid="@tables.Tableid" data-bs-target="#EditTable"
              src="~/images/icons/pen-fill.svg" alt="">
            <img class="delete-table" data-tablesdeleteid="@tables.Tableid" data-bs-toggle="modal"
              data-bs-target="#deletemodalfortable" src="~/images/icons/trash (1).svg" alt="">
          </td>
        </tr>
      }
    </tbody>
  </table>
</div>

<div class="d-flex table-footer align-items-center justify-content-end gap-lg-2 gap-md-2 gap-1 me-1 me-md-4 me-lg-4">
  <div class="d-flex align-items-center gap-1 items">
    <span class="ps-5 font2"  >Items Per Page</span>
    <select class="form-select" onchange="changePageSizeForTables()" id="selectpagesizeForTable"
      aria-label="Floating label select example" style="width: 65px;">
      @if (Model.PageSize != null)
      {
        <option value="3" selected="@(Model.PageSize==3 ? true : false)">3</option>
        <option value="5" selected="@(Model.PageSize==5 ? true : false)">5</option>
        <option value="10" selected="@(Model.PageSize==10 ? true : false)">10</option>
        <option value="15" selected="@(Model.PageSize==15 ? true : false)">15</option>
      }
    </select>
  </div>
  <div class="d-flex align-items-center gap-1">
    <span class="font2"> Showing @((Model.CurrentPage - 1) * Model.PageSize +
      1)-@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalRecords) of
      @Model.TotalRecords</span>
    <div class="pt-3">
      <nav aria-label="Page navigation example">
        <ul class="pagination gap-2">
          <li class="page-item @(Model.CurrentPage>1 ? " " : "disabled") ">
            <a class="page-link" aria-label="Previous" id="@Model." onclick="changePageForTable(@Model.CurrentPage-1)">
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
          <li>
            <span class="page-link">@Model.CurrentPage</span>
          </li>
          <li class="page-item @(Model.CurrentPage<Model.TotalPages ? " " : "disabled")  ">
            <a class="page-link" aria-label="Next" onclick="changePageForTable(@Model.CurrentPage+1)">
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<div class="modal fade" id="deleteTableModalForMass" tabindex="-1" aria-labelledby="exampleModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex justify-content-center align-items-center flex-column">
        <img class="" src="images/icons/exclamation-triangle.svg" alt="">
        <h1 class="fs-5">Are You Sure you want to delete the tables(s)?</h1>
      </div>
      <div id="tableListForDelete" hidden>
      </div>
      <form id="deleteForTableMass" method="post" class="modal-footer d-flex justify-content-center">
        <button type="submit" class="btn btn-primary">Yes</button>
        <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
      </form>
    </div>
  </div>
</div>

<script>

  $(document).on("input","#tableSearch", function () {
      console.log("success");
        currentPage = 1;
        changePageForTable(currentPage);
      });

  @*Mass Delete*@

  function getTableIds() {
    let selectIds = [];

    $(".inner-check-table-delete:checked").each(function () {
      let id = $(this).data("deletetableid");
      console.log("id:", id);
      if (id !== undefined) {
        selectIds.push(id);
      }
    });

    console.log("Select:", selectIds);
    return selectIds;
  }

  $(document).on("click", "#deleteMassTable", function () {
    var listTable = getTableIds();
    console.log("list:", listTable);
    $('#tableListForDelete').html(listTable.join(','));

    $(document).on("submit", "#deleteForTableMass", function (event) {
      event.preventDefault();

      let tableLists = getTableIds();
      console.log("table", tableLists);

      if (tableLists.length === 0) {
        alert("No tables selected for deletion.");
        return;
      }

      var formData = new FormData();
      tableLists.forEach(function (id) {
        formData.append('tableLists', id);
      });

      $.ajax({
        url: '/Table/DeleteCombine',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function (data) {
          location.reload();
          console.log("Response:", data);
        },
        error: function (xhr, status, error) {
          console.error("Error deleting items:", xhr.responseText);
          alert("An error occurred while deleting the items.");
          $('#deleteTableModalForMass').modal('hide');
        }
      });
    });

  });





  $(document).on('click', '.delete-table', function () {
    var tableId = $(this).data('tablesdeleteid');
    console.log("tableid:", tableId);
    $('#TablesId').val(tableId);
  });

  function changePageSizeForTables() {
    let pagesize = $('#selectpagesizeForTable').val();
    let selectedSectionId = @Model.Sectionid;
    let search = $('#tableSearch').val();

    $.ajax({
      url: '@Url.Action("TablesBySection", "Table")',
      type: "GET",
      data: { id: selectedSectionId, pageSize: pagesize, pageNo: 1, searchKey: search },
      dataType: "html",
      success: function (data) {
        $('#table-container-table').html(data);
      },
      error: function () {
        $('#table-container-table').html("No Data Found");
      }
    });
  }

  function changePageForTable(pageNum) {
    let pagesize = @Model.PageSize;
    let selectedCategoryId = @Model.Sectionid;
    let search = $('#tableSearch').val(); 

    $.ajax({
      url: '@Url.Action("TablesBySection", "Table")',
      type: "GET",
      data: { id: selectedCategoryId, pageSize: pagesize, pageNo: pageNum, searchKey: search },
      dataType: "html",
      success: function (data) {
        $('#table-container-table').html(data);
      },
      error: function () {
        $('#table-container-table').html("No Data Found");
      }
    });
  }

  $(document).ready(function () {
    const outerCheck = document.getElementById("outercheckforTable");
    const innerChecks = document.querySelectorAll(".inner-check-table-delete");

    outerCheck.addEventListener("change", function () {
      innerChecks.forEach(checkbox => {
        checkbox.checked = outerCheck.checked;
      });
    });

    innerChecks.forEach(checkbox => {
      checkbox.addEventListener("change", function () {
        const allChecked = [...innerChecks].every(cb => cb.checked);
        const anyChecked = [...innerChecks].some(cb => cb.checked);

        outerCheck.checked = allChecked;
        outerCheck.indeterminate = !allChecked && anyChecked;
      });
    });
  });


</script>
