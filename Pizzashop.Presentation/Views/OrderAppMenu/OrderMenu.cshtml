@{
    Layout = "~/Views/Shared/_OrderApp.cshtml";
    ViewData["Title"] = "Menu";
    ViewBag.Active = "Kot";
}
@model Pizzashop.DAL.ViewModels.OrderAppMenuviewmodel

<link rel="stylesheet" href="~/css/OrderAppMenu.css" asp-append-version="true" />

<input type="hidden" id="CustomerData" data-customerid="@Model.CustomerId">
<input type="hidden" id="OrderData" data-orderid="@Model.OrderId">

<body style="margin: 0; overflow: hidden;">
    <div class="d-flex m-0 pe-3">

        <div class="bg-white col-2 p-0" style="position: sticky; top: 0; height: 100vh; overflow-y: auto;">
            <div class="fw-bold ps-3 pb-3 pt-3 fs-5">Category</div>
            <div class="aa">
                <a href="" class="sidebar-tile fs-6 tab-btn" id="favourite-items">
                    <div class="text-nowrap">Favourite Items</div>
                </a>
            </div>
            <div class="aa">
                <a class="sidebar-tile fs-6 tab-btn active-tab" id="AllItems" data-categoryid="0">
                    <div>All</div>
                </a>
            </div>
            <div id="categorydetails"></div>
        </div>

        <div class="@(Model.CustomerId !=0 || Model.OrderId !=0 ? "col-5" : "col-10")  p-3">
            <div class="main-content d-flex justify-content-between mt-3">
                <!-- Search Bar -->
                <div class="d-flex justify-content-end position-relative align-items-center ps-2">
                    <input type="text" class="search form-control search-bar"
                        style="height: 60px; width: 270px !important;" id="MenuItemSearch" placeholder="Search" />
                    <img src="~/images/icons/search.svg" alt="" style="width: 20px; aspect-ratio: 1"
                        class="bg-white position-absolute rounded-2 m-2" />
                </div>

                <!-- Legends -->
                <div class="d-flex gap-3">
                    <div class="d-flex gap-2 align-items-center">
                        <span style="color: var(--table-vegetarian)"><i class="bi bi-circle-fill"></i></span>
                        <span>Vegetarian</span>
                    </div>
                    <div class="d-flex gap-2 align-items-center">
                        <span style="color: var(--table-nonvegetarian)"><i class="bi bi-circle-fill"></i></span>
                        <span >Non-Vegetarian</span>
                    </div>
                    <div class="d-flex gap-2 align-items-center">
                        <span style="color: var(--table-vegan)"><i class="bi bi-circle-fill"></i></span>
                        <span>Vegan</span>
                    </div>
                </div>
            </div>

            <!-- Scrollable Item Section -->
            <div class="mt-3 pb-5" id="ItemsContainer" style=" height:900px; overflow-y:auto; ">
                <!-- Your items here -->
            </div>
        </div>

        @if (Model.CustomerId != 0 || Model.OrderId != 0)
        {
            <div id="OrderMenuData">
            </div>
        }



    </div>
</body>


<div id="ItemModalContent">

</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>

@*Customer Details*@


<div class="modal fade" data-bs-backdrop="static" id="CustomerDetails" tabindex="-1"
    aria-labelledby="customerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" id="customer-details">

        </div>
    </div>
</div>

<div class="modal fade" data-bs-backdrop="static" id="QrCodeModal" tabindex="-1" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">QR CODE</h1>
                <button type="button" class="btn-close qrcodeclose" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body qrcode-body">
                <div id="qrdetails">

                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary qrcodeclose">Done</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" data-bs-backdrop="static" id="OrderInstruction" tabindex="-1"
    aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div id="OrderCommentData">

            </div>
        </div>
    </div>
</div>



@section Scripts
{
    <script>

        $(document).ready(function () {
            getCategories();
            GetItems(0);
        });


        // Fetch Categories
        function getCategories() {
            $.ajax({
                url: "/OrderAppMenu/GetCategories",
                type: "GET",
                success: function (data) {
                    $("#categorydetails").html(data);
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching categories:", error);
                }
            });
        }
    </script>

    @*Fetch Items*@
    <script>

        //Fetch Category wise Items
        $(document).off("click", ".category-click").on("click", ".category-click", function () {
            var categoryid = $(this).data("categoryid");
            console.log("categoryid:", categoryid);
            document.querySelectorAll(".tab-btn").forEach(tab => {
                tab.classList.remove("active-tab");
            });
            $(this).addClass("active-tab");
            GetItems(categoryid);
        })

        $(document).on("input", "#MenuItemSearch", function () {
            var categoryid = $(".active-tab").data("categoryid");
            GetItems(categoryid);
        });


        $(document).on("click", "#AllItems", function () {
            GetItems(0);
            $(".tab-btn").removeClass("active-tab");
            $(this).addClass("active-tab");
        });

        function GetItems(categoryid) {
            let search = $("#MenuItemSearch").val();

            $.ajax({
                url: "/OrderAppMenu/GetItems",
                type: "GET",
                data: { Categoryid: categoryid, SearchKey: search },
                success: function (data) {
                    $("#ItemsContainer").html(data);
                    $("#MenuItemSearch").val();
                },
                error: function (xhr, status, error) {
                    console.log("Error: " + error);
                }
            });
        } 
    </script>

    @*Favourite Category*@
    <script>

        $(document).on("click", "#favourite-items", function () {
            $(".tab-btn").removeClass("active-tab");
            $(this).addClass("active-tab");
        });

        $(document).on("click", "#favourite-items", function (e) {
            e.preventDefault();
            let search = $("#MenuItemSearch").val();
            favouriteitems(search);
        });

        function favouriteitems(search) {
            $.ajax({
                url: "/OrderAppMenu/GetFavouriteItems",
                type: "GET",
                data: { SearchKey: search },
                success: function (data) {
                    $("#ItemsContainer").html(data);
                },
                error: function (xhr, status, error) {
                    console.log("Error: " + error);
                }
            });
        }
    </script>

    @*Add to Favourites/Remove From Favourites*@
    <script>
        $(document).on("click", ".bi-heart", function () {
            $(this).addClass("bi-heart-fill");
            $(this).removeClass("bi-heart");

            let itemid = $(this).data("itemid");

            $.ajax({
                url: "/OrderAppMenu/UpdateFavourite",
                type: "POST",
                data: { itemid: itemid },
                success: function (data) {
                    toastr.success("Item added to favourites");
                },
                error: function (xhr, status, error) {
                    console.error("Error:", error);
                }
            });
        });

        $(document).on("click", ".bi-heart-fill", function () {
            $(this).addClass("bi-heart");
            $(this).removeClass("bi-heart-fill");
            let itemid = $(this).data("itemid");

            $.ajax({
                url: "/OrderAppMenu/UpdateFavourite",
                type: "POST",
                data: { itemid: itemid },
                success: function (data) {
                    favouriteitems(" ");
                    console.log("Success:", data);
                    toastr.success("Item removed from favourites");
                },
                error: function (xhr, status, error) {
                    console.error("Error:", error);
                }
            });
        });
    </script>

    <script>
        let min_max_modifiergroup = [];
        let selectedmodifier = {};
        let selected_items = [];
        var deletedOrderItemIds = [];
        var tax_data = [];
        var globalid = 0;

        $(document).ready(function () {
            let orderid = @Model.OrderId;
            if (orderid != 0) {
                var itemlist = @Html.Raw(Json.Serialize(Model.orderitems));
                for (let i = 0; i < itemlist.length; i++) {
                    var modifiersList = [];
                    for (let j = 0; j < itemlist[i].modifiers.length; j++) {
                        modifiersList.push({
                            modifierId: itemlist[i].modifiers[j].modifierId,
                            modifierName: itemlist[i].modifiers[j].modifierName,
                            modifierPrice: itemlist[i].modifiers[j].price,
                            modifierQuantity: itemlist[i].modifiers[j].quantity,
                        });
                    }
                    selected_items.push({
                        itemId: itemlist[i].itemId,
                        itemName: itemlist[i].itemName,
                        itemTax : itemlist[i].itemTax,
                        orderItemId: itemlist[i].orderItemId,
                        globalId: itemlist[i].orderItemId,
                        price: itemlist[i].price,
                        quantity: itemlist[i].quantity,
                        modifiers: modifiersList,
                    });
                    globalid = globalid < itemlist[i].orderItemId ? itemlist[i].orderItemId : globali
                
                }
                    var taxlist = @Html.Raw(Json.Serialize(Model.orderTax));

                    for(let i=0; i<taxlist.length;i++)
                    {
                        tax_data.push({
                            taxId : taxlist[i].taxId,
                            taxName : taxlist[i].taxName,
                            taxType : taxlist[i].taxType,
                            taxRate : taxlist[i].taxRate
                        });
                    }   
            }  
            getSubTotal();
        });
       

        $(document).off("click", ".item-modifeir-class").on("click", ".item-modifeir-class", function () {
            var itemid = $(this).data("itemid");
            var itemname = $(this).data("itemname");
            var itemprice = $(this).data("itemprice");
            let totalmodifierprice = $(this).data("modfierTotalAmount");
            var itemTax = $(this).data("itemtax");
            var clickedElement = $(this);

            $.ajax({
                url: "/OrderAppMenu/GetModalData",
                type: "GET",
                data: { ItemId: itemid },
                success: function (data) {
                    if (data.success !== false) {
                        $("#ItemModalContent").html(data);
                        $("#ItemModifierGroupModal").modal("show");

                        min_max_modifiergroup = [];
                        selectedmodifier = {};
                        $(".min_max").each(function () {
                            let modifierGroupId = $(this).data("modifiergroupid");
                            let minValue = $(this).data("minvalue");
                            let maxValue = $(this).data("maxvalue");

                            min_max_modifiergroup.push({
                                ModifierGroupId: modifierGroupId,
                                Min: minValue,
                                Max: maxValue
                            });
                        });

                        console.log("min_max_modifiergroup:", min_max_modifiergroup);
                    } else {
                        let exist_item = selected_items.find(item => item.itemId === itemid)
                        console.log("existing item:",exist_item);

                        if (!exist_item) {
                            selected_items.push({
                                itemId: itemid,
                                itemName: itemname,
                                itemTax : itemTax,
                                orderItemId: 0,
                                globalId: globalid + 1,
                                price: itemprice,
                                quantity: 1,
                                modifiers: []
                            });
                            globalid += 1;
                            getSubTotal();
                        }
                        else {
                            exist_item.quantity = exist_item.quantity + 1;
                            $(`#item-quantity-${exist_item.globalId}`).text(exist_item.quantity);
                            $(`#item-amount-${exist_item.globalId}`).text(exist_item.price * exist_item.quantity);
                            getSubTotal();
                            return;
                        }


                        let itemaccordian =
                            `
                                  <div class="item-row w-100 py-1 px-2 d-flex align-items-center justify-content-between border mt-2 mb-2" id="accord-${globalid}">
                            <div class="accordion mt-2 mb-2" id="item-accordian-1">
                        <div class="d-flex align-items-center gap-2 drop-class" data-bs-toggle="collapse" data-bs-target="#order-item-${globalid}" aria-expanded="false" aria-controls="order-item-${globalid}">
                        <img src="~/images/dropdownimg.webp" alt="" height="23" class="icon-rotate opacity-50">
                        <span class="item-name-for-order">${itemname}</span>
                        </div>
                        <div id="order-item-${globalid}" class="p-0 ms-0 collapse" aria-labelledby="headingPizza" data-bs-parent="#item-accordian-1">

                        </div>
                    </div>
                    <div class="item-end-part-for-order">
                    <!-- Quantity Box -->
                                <div class="d-flex align-items-center justify-content-between px-2 py-0 gap-1 quantity-box">
                                <i class="bi bi-dash" onclick="MinusQuantity(${globalid})" id="minus-quantity-${globalid}" ></i>
                                <span class="quantity-box-display" id="item-quantity-${globalid}" data-itemid=${globalid}
                             data-itemname=${itemname} data-itemprice=${itemprice} data-modifiertotalprice = ${totalmodifierprice}>
                                1
                                </span>
                                <i class="bi bi-plus" onclick="PlusQuantity(${globalid})" id="minus-quantity-${globalid}"></i>
                                </div>
                                <!-- Price Details -->
                                <div class="d-flex flex-column align-items-start gap-1 item-sums">
                                <div class="d-flex align-items-center">₹<div class="item-amount" id="item-amount-${globalid}">${itemprice}</div></div>
                                </div>
                                <!-- Delete Icon -->
                                <div class="d-flex justify-content-center align-items-center delete-item" data-global-id="${globalid}">
                                <i class="bi bi-trash fs-5"></i>
                                </div>
                        </div>
                        </div>
                                `;

                        $("#itemdata").append(itemaccordian);

                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching item modifier group:", error);
                }
            });
        });
    </script>

    @*Item + and -*@
    <script>
        function MinusQuantity(uniqueid) {
            let quantityElement = $(`#item-quantity-${uniqueid}`);
            let ItemQuantity = parseInt(quantityElement.text());
            let Itemid = $(quantityElement).data("itemid");
            let itemprice = $(quantityElement).data("itemprice");

            if (ItemQuantity === 1) {
                return;
            }

            let exist_item = selected_items.find(item => item.globalId === uniqueid);
            console.log("exist", exist_item);
            let modifiertotalprice = $(quantityElement).data("modifiertotalprice");
            ItemQuantity = ItemQuantity - 1;
            console.log(ItemQuantity);

            if (exist_item.orderItemId != 0) {
                let readyquantity = $(quantityElement).data("readyItem");
                if (readyquantity > ItemQuantity) {
                    toastr.error(`Cannot decrease the item beacuse ${readyquantity} items are ready`);
                    return;
                }
            }
            exist_item.quantity = ItemQuantity;
            $(`#item-amount-${uniqueid}`).text(ItemQuantity * itemprice);
            $(`#item-modifier-amount-${uniqueid}`).text(ItemQuantity * modifiertotalprice)
            quantityElement.text(ItemQuantity);

             getSubTotal();
        }


        function PlusQuantity(uniqueid) {
            let Quantity = $(`#item-quantity-${uniqueid}`);
            console.log("quant:", Quantity);
            let ItemQuantity = parseInt(Quantity.text());
            ItemQuantity = ItemQuantity + 1;
            console.log("itemquant:", ItemQuantity);

            let exist_item = selected_items.find(item => item.globalId === uniqueid);
            console.log("exist_item:", exist_item);

            let modifiertotalprice = $(Quantity).data("modifiertotalprice");
            exist_item.quantity = ItemQuantity;
            let Itemid = $(Quantity).data("itemid");
            console.log(ItemQuantity);
            console.log(exist_item.price);
            $(`#item-amount-${uniqueid}`).text(ItemQuantity * exist_item.price);
            $(`#item-modifier-amount-${uniqueid}`).text(ItemQuantity * exist_item.modifiertotalprice);
            Quantity.text(ItemQuantity);
             getSubTotal();
        }

        $(document).off("click", ".delete-item").on("click", ".delete-item", function () {
            var uniqueid = $(this).data("globalId");
            console.log("uniqueid:", uniqueid);
            let quantityElement = $(`#item-quantity-${uniqueid}`);
            console.log("quant:", quantityElement);
            let exist_item = selected_items.find(item => item.globalId === uniqueid);
            console.log("existitem:", exist_item);
            let OrderItemId = 0;

            if (exist_item.orderItemId != 0) {
                let readyquantity = $(quantityElement).data("readyItem");
                if (readyquantity != 0) {
                    toastr.error(`Cannot delete the item beacuse ${readyquantity} items are ready`);
                    return;
                }
                OrderItemId = exist_item.OrderItemId;
                selected_items = selected_items.filter(item => item.globalId != uniqueid);
                deletedOrderItemIds.push(OrderItemId);
                $(`#accord-${uniqueid}`).remove();

                return;
            }

            selected_items = selected_items.filter(item => item.globalId != uniqueid);
            $(`#accord-${uniqueid}`).remove();
             getSubTotal();

        });

    </script>

    @*Add selected class to card*@
    <script>
        var selectedmodifiers = {};

        $(document).off("click", ".item-modifeir-card").on("click", ".item-modifeir-card", function () {
            var modifierGroupId = $(this).data("modifiergroupid");
            var modifierId = $(this).data("modifierid");

            var current_min_max = min_max_modifiergroup.find(u => u.ModifierGroupId == modifierGroupId);
            console.log("current_min_max:", current_min_max);

            if (!selectedmodifiers[modifierGroupId]) {
                selectedmodifiers[modifierGroupId] = [];
            }
            console.log("selectedmodifiers:", selectedmodifiers);

            let selected_list = selectedmodifiers[modifierGroupId];
            let index = selected_list.indexOf(modifierId);

            console.log("selected_list:", selected_list);
            console.log("index:", index);

            if (index > -1) {
                selected_list.splice(index, 1);
                $(this).removeClass("cardSelected");
                console.log("Modifier removed");
            }
            else {
                if (selected_list.length < current_min_max.Max) {
                    selected_list.push(modifierId);
                    $(this).addClass("cardSelected");
                    console.log("Modifier added");
                } else {
                    let name = $(`#modifier-name-${modifierGroupId}`).text();
                    toastr.error("You can select a maximum of " + current_min_max.Max + " " + "from" + " " + name);
                }
            }
        });
    </script>

    @*Get Order Data*@

    <script>
        $(document).ready(function () {
            var orderId = $("#OrderData").data("orderid");
            console.log("Order ID:", orderId);

            if (orderId != 0) {
                $.ajax({
                    url: "/OrderAppMenu/GetOrderData",
                    type: "GET",
                    data: { OrderId: orderId },
                    success: function (data) {
                        $("#OrderMenuData").html(data);
                        getSubTotal();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching order data:", error);
                    }
                });
            }
        });
    </script>

    @*Customer Details*@
    <script>
        $(document).on("click", ".CustomerIcon", function () {
            var orderId = $(this).data("orderid");
            console.log("Order ID:", orderId);

            $.ajax({
                url: "/OrderAppMenu/GetCustomerDetails",
                type: "GET",
                data: { OrderId: orderId },
                success: function (data) {
                    $("#customer-details").html(data);
                    var modal = new bootstrap.Modal(document.getElementById('CustomerDetails'));
                    modal.show();
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching customer details:", error);
                }
            });

        });

        $(document).off("submit", "#SaveCustomerDetails").on("submit", "#SaveCustomerDetails", function (e) {
            e.preventDefault();
            var formData = new FormData(this);

            $.ajax({
                url: "/OrderAppMenu/SaveCustomerDetails",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    toastr.success("Customer details saved successfully");
                    $("#CustomerDetails").modal("hide");
                },
                error: function (xhr, status, error) {
                    console.error("Error:", error);
                }
            });
        });

    </script>

    @*Qr Code *@

    <script>
        $(document).off("click", ".qrcodeclose").on("click", ".qrcodeclose", function (e) {
            e.preventDefault();
            $("#qrdetails").empty();
            $('#QrCodeModal').modal('hide');
        })
    </script>

    <script>
        $(document).ready(function () {
            $(document).on("click", "#qrcode", function () {

                $('#QrCodeModal').modal('show');

                var qrcode = new QRCode("qrdetails", {
                    text: "http://jindo.dev.naver.com/collie",
                    width: 1028,
                    height: 1028,
                    colorDark: "#000000",
                    colorLight: "#ffffff",
                    correctLevel: QRCode.CorrectLevel.H
                });
            });
        });
    </script>

    @*Order Wise Comment*@

    <script>
        $(document).off("click", ".ordermodalclose").on("click", ".ordermodalclose", function () {
            $("#OrderInstruction").modal("hide");
        });
        $(document).off("click", ".ordercomment").on("click", ".ordercomment", function () {
            var orderId = $(this).data("orderid");

            $.ajax({
                url: "/OrderAppMenu/GetOrderComments",
                type: "GET",
                data: { OrderId: orderId },
                success: function (data) {
                    $("#OrderCommentData").html(data);
                    var modal = new bootstrap.Modal(document.getElementById('OrderInstruction'));
                    modal.show();
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching order comment:", error);
                }
            });
        });

        $(document).off("submit", "#OrderCommentModal").on("submit", "#OrderCommentModal", function (e) {
            e.preventDefault();
            var formData = new FormData(this);

            $.ajax({
                url: "/OrderAppMenu/PostComment",
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    toastr.success("Comment Added successfully!");
                    $("#OrderInstruction").modal("hide");
                },
                error: function (xhr, status, error) {
                    console.error("Error:", error);
                }
            });

        });

    </script>

    @*Get Items in Order Card*@

    <script>
        let selectedModifiersItems = [];
        $(document).off("click", "#ItemModifierGroupModalModalSubmit").on("click", "#ItemModifierGroupModalModalSubmit", function () {

            for (let i = 0; i < min_max_modifiergroup.length; i++) {
                let modifierGroupId = min_max_modifiergroup[i].ModifierGroupId;
                if (!selectedmodifiers[modifierGroupId]) {
                    selectedmodifiers[modifierGroupId] = [];
                }
                let selected_list = selectedmodifiers[modifierGroupId];
                console.log("selected_list:", selected_list);
                console.log("modifierGroupId", modifierGroupId);
                if (selected_list.length < min_max_modifiergroup[i].Min) {
                    let name = $(`#modifier-name-${modifierGroupId}`).text();
                    toastr.error("You must select a minimum " + min_max_modifiergroup[i].Min + " " + "from" + " " + name);
                    return;
                }

            }
            let TotalModifierPrice = 0;

            $(".item-modifeir-card.cardSelected").each(function () {
                let price = parseFloat($(this).data("modifierprice"));

                selectedModifiersItems.push({
                    ModifierId: $(this).data("modifierid"),
                    ModifierName: $(this).data("modifiername"),
                    modifierPrice: price,
                    modifierQuantity: 1
                });

                if (!isNaN(price)) {
                    TotalModifierPrice += price;
                }
            });

            var ItemId = $(this).data("itemid");
            var itemname = $(this).data("itemname");
            var itemTax = $(this).data("itemtax");
            var itemprice = $(`#item-price-${ItemId}`).text();
            var price = parseFloat(itemprice.replace('₹', '').trim());
            var formattedPrice = price.toFixed(2); 
            console.log(formattedPrice);
            console.log("pricemodif:",price);

            var itemQuantity = 1;

            var totalamount = price * itemQuantity;

            selected_items.push({
                itemId: ItemId,
                itemName: itemname,
                itemTax : itemTax,
                orderItemId: 0,
                globalId: globalid + 1,
                price: price,
                quantity: itemQuantity,
                modifiers: selectedModifiersItems,
            });
            globalid += 1;
           

            let dataToSend = {
                ItemId: ItemId,
                ItemName: itemname,
                OrderItemId: globalid,
                Readyitem: 0,
                price: price,
                Quantity: itemQuantity,
                TotalAmount: totalamount,
                modifiers: selectedModifiersItems,
                TotalModifierAmount : TotalModifierPrice
            };
            let saveorderitem = [];
            saveorderitem.push(dataToSend);

            getSubTotal();
            let OrderItem = JSON.stringify(saveorderitem);

            $.ajax({
                url: "/OrderAppMenu/AppendOrderItems",
                type: "POST",
                data: { OrderItem: OrderItem },
                success: function (data) {
                    $("#itemdata").append(data);
                    selectedModifiersItems = [];
                    $("#ItemModifierGroupModal").modal("hide");
                },
                error: function (xhr, status, error) {
                    console.error("Error adding item:", error);
                }
            });
        });
    </script>

    @*Get SubTotal*@
    <script>
        function getSubTotal()
        {
            let subtotal = 0;
            let total;
            if(selected_items.length != 0){
                selected_items.forEach(item=>{
                    let itemtotal = parseFloat(item.price || 0); 
                    itemtotal = itemtotal * item.quantity; 
                    item.modifiers.forEach(modifier => {
                        itemtotal += parseFloat(modifier.modifierPrice || 0);
                    });
                    subtotal += itemtotal;
                });
                $("#subtotalcontainer").html(subtotal);
                total = subtotal;

                tax_data.forEach(tax => {
                    let taxprice = 0;

                    if(tax_data.taxType == "percentage")
                    {
                        taxprice = subtotal * parseFloat(tax.taxRate)/100;
                    }
                    else{
                        taxprice = parseFloat(tax.taxRate);
                    }
                    total +=taxprice;
                    console.log("taxprice:",taxprice);
                    $(`#tax-amount-${tax.taxId}`).text(taxprice.toFixed(2));
                })
                console.log("tax:",$("#totalamountcontainer"));
                $("#totalamountcontainer").text(total.toFixed(2));
            }
            else{
                $("#subtotalcontainer").text("00.00");
                  tax_data.forEach(tax=>{
                     $(`#tax-amount-${tax.taxId}`).text("00.00");
                  });
                 $("#totalamountcontainer").text("00.00");
            }
        }
    </script>

}

<style>
    .qrcode-body img {
        height: 150px;
        margin-bottom: 15px;
        margin-left: 150px;
    }
</style>